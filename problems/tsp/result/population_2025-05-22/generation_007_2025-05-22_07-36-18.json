{
  "heuristics": [
    {
      "concept": "\u52a8\u6001\u65b9\u5411-\u5bc6\u5ea6\u8026\u5408\u542f\u53d1\u5f0f\uff1a\u901a\u8fc7\u6307\u6570\u5e73\u6ed1\u65b9\u5411\u5411\u91cf\u4fdd\u6301\u8def\u5f84\u8fde\u8d2f\u6027\uff0c\u7ed3\u5408\u5c40\u90e8\u8ddd\u79bb\u53d8\u5f02\u7cfb\u6570\u52a8\u6001\u611f\u77e5\u7a7a\u95f4\u5206\u5e03\u5bc6\u5ea6\uff0c\u91c7\u7528\u53cc\u66f2\u6b63\u5207\u51fd\u6570\u975e\u7ebf\u6027\u8026\u5408\u65b9\u5411\u4fee\u6b63\u4e0e\u5bc6\u5ea6\u6743\u91cd\uff0c\u5e76\u968f\u672a\u8bbf\u95ee\u8282\u70b9\u6570\u91cf\u81ea\u9002\u5e94\u8c03\u6574\u63a2\u7d22-\u6536\u655b\u5e73\u8861\uff0c\u5229\u7528\u52a8\u6001\u7f29\u51cf\u5019\u9009\u96c6\u5b9e\u73b0\u8f7b\u91cf\u5316\u8ba1\u7b97",
      "feature": "\u65b9\u5411\u8fde\u8d2f\u6027+\u52a8\u6001\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570+\u53cc\u66f2\u6b63\u5207\u975e\u7ebf\u6027\u8026\u5408+\u6307\u6570\u5e73\u6ed1\u65b9\u5411\u5411\u91cf+\u9636\u6bb5\u81ea\u9002\u5e94\u6743\u91cd+\u52a8\u6001\u5019\u9009\u96c6\u7f29\u51cf",
      "algorithm": "import numpy as np  \n\ndef select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):  \n    if len(unvisited_nodes) == 0:  \n        return destination_node  \n\n    # \u8ba1\u7b97\u5c40\u90e8\u8ddd\u79bb\u53d8\u5f02\u7cfb\u6570\uff08\u6807\u51c6\u5dee/\u5747\u503c\uff09  \n    local_dists = distance_matrix[current_node][unvisited_nodes]  \n    mean_dist = np.mean(local_dists)  \n    cv_density = np.std(local_dists) / (mean_dist + 1e-8)  \n\n    # \u65b9\u5411\u5411\u91cf\u6307\u6570\u5e73\u6ed1\uff08\u521d\u59cb\u5316\u4e3a\u5f53\u524d\u8282\u70b9\u5230\u672a\u8bbf\u95ee\u8282\u70b9\u5e73\u5747\u65b9\u5411\uff09  \n    dir_vectors = distance_matrix[unvisited_nodes] - distance_matrix[current_node]  \n    avg_direction = np.mean(dir_vectors, axis=0)  \n    avg_direction /= np.linalg.norm(avg_direction) + 1e-8  \n\n    # \u52a8\u6001\u5019\u9009\u96c6\uff08\u521d\u671f30%\uff0c\u540e\u671f10%\uff09  \n    progress = 1 - len(unvisited_nodes) / len(distance_matrix)  \n    k = max(1, int(len(unvisited_nodes) * (0.3 - 0.2 * progress)))  \n    candidate_indices = np.argpartition(local_dists, k)[:k]  \n\n    min_score = np.inf  \n    next_node = unvisited_nodes[0]  \n\n    for idx in candidate_indices:  \n        node = unvisited_nodes[idx]  \n        node_dir = distance_matrix[node] - distance_matrix[current_node]  \n        dir_sim = np.dot(avg_direction, node_dir) / (np.linalg.norm(node_dir) + 1e-8)  \n\n        # \u9636\u6bb5\u81ea\u9002\u5e94\u8bc4\u5206\uff1a\u65b9\u5411\u6743\u91cd\u968f\u8fdb\u5ea6\u8870\u51cf  \n        dir_weight = 1.5 * (1 - progress)  \n        score = local_dists[idx] * np.tanh(dir_weight + dir_sim) * (1.1 - 0.5 * cv_density)  \n\n        if score < min_score:  \n            min_score = score  \n            next_node = node  \n\n    return next_node",
      "objective": 1.3104304862166294
    },
    {
      "concept": "\u57fa\u4e8e\u65b9\u5411\u8fde\u8d2f\u6027\u4e0e\u52a8\u6001\u5bc6\u5ea6\u71b5\u7684\u8f7b\u91cf\u5316\u542f\u53d1\u5f0f\uff1a\u901a\u8fc7\u5c40\u90e8\u8fd1\u90bb\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570\u91cf\u5316\u7a7a\u95f4\u5206\u5e03\u590d\u6742\u5ea6\uff0c\u7ed3\u5408\u8def\u5f84\u5386\u53f2\u79fb\u52a8\u5411\u91cf\u7684\u6307\u6570\u5e73\u6ed1\u65b9\u5411\u5f15\u5bfc\u641c\u7d22\uff1b\u91c7\u7528\u53cc\u66f2\u6b63\u5207\u51fd\u6570\u975e\u7ebf\u6027\u8026\u5408\u5c40\u90e8\u8ddd\u79bb\u3001\u65b9\u5411\u4e00\u81f4\u6027\u548c\u5bc6\u5ea6\u71b5\uff0c\u5b9e\u73b0\u81ea\u9002\u5e94\u7684\u63a2\u7d22-\u6536\u655b\u5e73\u8861\uff0c\u5728\u4fdd\u8bc1\u8f7b\u91cf\u8ba1\u7b97\u7684\u540c\u65f6\u63d0\u5347\u8def\u5f84\u6d41\u7545\u6027",
      "feature": "\u65b9\u5411\u8fde\u8d2f\u6027\u4f18\u5316+\u5c40\u90e8\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570+\u53cc\u66f2\u6b63\u5207\u975e\u7ebf\u6027\u8026\u5408+\u6307\u6570\u5e73\u6ed1\u65b9\u5411\u5411\u91cf+\u52a8\u6001\u5019\u9009\u96c6\u7f29\u51cf",
      "algorithm": "import numpy as np  \n\ndef select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):  \n    if len(unvisited_nodes) == 0:  \n        return destination_node  \n\n    # \u8ba1\u7b97\u5c40\u90e8\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570\uff08\u6807\u51c6\u5dee/\u5747\u503c\uff09  \n    local_dists = distance_matrix[current_node][unvisited_nodes]  \n    mean_dist = np.mean(local_dists)  \n    cv_density = np.std(local_dists) / (mean_dist + 1e-8)  \n\n    # \u65b9\u5411\u5411\u91cf\u6307\u6570\u5e73\u6ed1\uff08\u521d\u59cb\u5316\u4e3a\u5f53\u524d\u8282\u70b9\u5230\u672a\u8bbf\u95ee\u8282\u70b9\u5e73\u5747\u65b9\u5411\uff09  \n    dir_vectors = distance_matrix[unvisited_nodes] - distance_matrix[current_node]  \n    avg_direction = np.mean(dir_vectors, axis=0)  \n    avg_direction /= np.linalg.norm(avg_direction) + 1e-8  \n\n    # \u52a8\u6001\u5019\u9009\u96c6\uff08Top 20%\u6700\u8fd1\u90bb\uff09  \n    k = max(1, int(len(unvisited_nodes) * 0.2))  \n    candidate_indices = np.argpartition(local_dists, k)[:k]  \n\n    min_score = np.inf  \n    next_node = unvisited_nodes[0]  \n\n    for idx in candidate_indices:  \n        node = unvisited_nodes[idx]  \n        node_dir = distance_matrix[node] - distance_matrix[current_node]  \n        dir_sim = np.dot(avg_direction, node_dir) / (np.linalg.norm(node_dir) + 1e-8)  \n\n        # \u975e\u7ebf\u6027\u8bc4\u5206\uff1a\u8ddd\u79bb \u00d7 tanh(1 + \u65b9\u5411\u4fee\u6b63) \u00d7 (1 - \u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570)  \n        score = local_dists[idx] * np.tanh(1.5 + dir_sim) * (1.1 - cv_density)  \n\n        if score < min_score:  \n            min_score = score  \n            next_node = node  \n\n    return next_node",
      "objective": 1.4878632684536828
    },
    {
      "concept": "\u53cc\u9636\u6bb5\u52a8\u6001\u5e73\u8861\u542f\u53d1\u5f0f\uff1a\u901a\u8fc7\u7b80\u5316\u4e24\u9636\u6bb5\u673a\u5236\uff08\u8fdb\u5ea6\u9608\u503c0.5\uff09\u5b9e\u73b0\u63a2\u7d22-\u6536\u655b\u5e73\u8861\uff0c\u65e9\u671f\u91c7\u7528\u65b9\u5411\u8fde\u8d2f\u6027\u4e0e\u5c40\u90e8\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570\u7684\u53cc\u66f2\u6b63\u5207\u8026\u5408\u5f15\u5bfc\u5168\u5c40\u63a2\u7d22\uff0c\u540e\u671f\u5207\u6362\u81f3\u8f7b\u91cf\u5316\u52bf\u80fd\u573a\u52a0\u901f\u6536\u655b\u3002\u52a8\u6001\u5019\u9009\u96c6\u7ebf\u6027\u7f29\u51cf\uff0830%\u219210%\uff09\u4fdd\u969c\u8ba1\u7b97\u6548\u7387\uff0c\u79fb\u9664\u5197\u4f59\u5168\u5c40\u8ba1\u7b97\u5b9e\u73b0\u53c2\u6570\u8f7b\u91cf\u5316",
      "feature": "\u65b9\u5411\u8fde\u8d2f\u6027+\u5c40\u90e8\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570+\u53cc\u66f2\u6b63\u5207\u8026\u5408+\u4e24\u9636\u6bb5\u52a8\u6001\u5207\u6362+\u7ebf\u6027\u5019\u9009\u96c6\u7f29\u51cf+\u8f7b\u91cf\u5316\u52bf\u80fd\u573a",
      "algorithm": "import numpy as np  \n\ndef select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):  \n    if len(unvisited_nodes) == 0:  \n        return destination_node  \n\n    progress = 1 - len(unvisited_nodes) / (distance_matrix.shape[0] - 1)  \n    local_dists = distance_matrix[current_node][unvisited_nodes]  \n    cv_density = np.std(local_dists) / (np.mean(local_dists) + 1e-8)  \n\n    k = max(1, int(len(unvisited_nodes) * (0.3 - 0.2 * progress)))  \n    candidate_indices = np.argpartition(local_dists, k)[:k]  \n\n    dir_vectors = distance_matrix[unvisited_nodes[candidate_indices]] - distance_matrix[current_node]  \n    avg_direction = np.mean(dir_vectors, axis=0)  \n    avg_direction /= np.linalg.norm(avg_direction) + 1e-8  \n\n    min_score = np.inf  \n    next_node = unvisited_nodes[candidate_indices[0]]  \n\n    for idx in candidate_indices:  \n        node = unvisited_nodes[idx]  \n        dist = local_dists[idx]  \n        node_dir = distance_matrix[node] - distance_matrix[current_node]  \n        dir_sim = np.dot(avg_direction, node_dir) / (np.linalg.norm(node_dir) + 1e-8)  \n\n        if progress < 0.5:  \n            score = dist * np.tanh(1.5 + dir_sim - cv_density)  \n        else:  \n            potential = np.sum(1 / (distance_matrix[node][unvisited_nodes[candidate_indices]] + 1e-8))  \n            score = dist / (potential + 1e-8)  \n\n        if score < min_score:  \n            min_score = score  \n            next_node = node  \n\n    return next_node",
      "objective": 1.4929085606096384
    },
    {
      "concept": "\u65b9\u5411\u52bf\u80fd\u6df7\u5408\u573a+\u52a8\u6001\u9636\u6bb5\u5207\u6362+\u53cc\u5bc6\u5ea6\u8c03\u63a7\uff1a\u878d\u5408\u65b9\u5411\u8fde\u8d2f\u6027\u4e0e\u52bf\u80fd\u573a\u7406\u8bba\uff0c\u901a\u8fc7\u8def\u5f84\u6784\u5efa\u8fdb\u5ea6\u52a8\u6001\u8c03\u6574\u7b56\u7565\u6743\u91cd\uff0c\u7ed3\u5408\u5c40\u90e8\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570\u548c\u5168\u5c40\u5206\u5e03\u5bc6\u5ea6\u5b9e\u73b0\u81ea\u9002\u5e94\u8bc4\u5206\u3002\u65b9\u5411\u4fee\u6b63\u52bf\u80fd\u8ba1\u7b97\u589e\u5f3a\u8def\u5f84\u6d41\u7545\u6027\uff0c\u9636\u6bb5\u611f\u77e5\u673a\u5236\u5e73\u8861\u63a2\u7d22\u4e0e\u6536\u655b\uff0c\u53cc\u5bc6\u5ea6\u8c03\u63a7\u4f18\u5316\u7a00\u758f/\u5bc6\u96c6\u533a\u57df\u7684\u641c\u7d22\u503e\u5411\u3002",
      "feature": "\u65b9\u5411\u4fee\u6b63\u52bf\u80fd\u573a+\u52a8\u6001\u9636\u6bb5\u5207\u6362+\u53cc\u5bc6\u5ea6\u8c03\u63a7+\u6307\u6570\u5e73\u6ed1\u65b9\u5411\u5411\u91cf+\u53cd\u8ddd\u79bb\u5e73\u65b9\u548c+\u975e\u7ebf\u6027\u8026\u5408",
      "algorithm": "import numpy as np  \n\ndef select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):  \n    if len(unvisited_nodes) == 0:  \n        return destination_node  \n\n    # \u9636\u6bb5\u5212\u5206\u7cfb\u6570\uff08\u5df2\u8bbf\u95ee\u6bd4\u4f8b\uff09  \n    progress = 1 - len(unvisited_nodes) / (distance_matrix.shape[0] - 1)  \n\n    # \u65b9\u5411\u5411\u91cf\u6307\u6570\u5e73\u6ed1  \n    dir_vectors = distance_matrix[unvisited_nodes] - distance_matrix[current_node]  \n    avg_direction = np.mean(dir_vectors, axis=0)  \n    avg_direction /= np.linalg.norm(avg_direction) + 1e-8  \n\n    # \u53cc\u5bc6\u5ea6\u8ba1\u7b97  \n    local_dists = distance_matrix[current_node][unvisited_nodes]  \n    cv_density = np.std(local_dists) / (np.mean(local_dists) + 1e-8)  # \u5c40\u90e8\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570  \n    global_density = 1 / (np.mean([np.min(distance_matrix[u][unvisited_nodes[unvisited_nodes != u]]) for u in unvisited_nodes]) + 1e-8)  # \u5168\u5c40\u5bc6\u5ea6  \n\n    min_score = np.inf  \n    next_node = unvisited_nodes[0]  \n\n    for node in unvisited_nodes:  \n        local_dist = distance_matrix[current_node][node]  \n        node_dir = distance_matrix[node] - distance_matrix[current_node]  \n        dir_sim = np.dot(avg_direction, node_dir) / (np.linalg.norm(node_dir) + 1e-8)  \n\n        # \u65b9\u5411\u4fee\u6b63\u52bf\u80fd  \n        potential = np.sum((1 + dir_sim) / (distance_matrix[node][unvisited_nodes]**2 + 1e-8))  \n\n        # \u52a8\u6001\u9636\u6bb5\u6743\u91cd  \n        phase_weight = 0.5 * (1 + np.tanh(10 * (progress - 0.5)))  # 0\u21921\u6e10\u53d8  \n\n        # \u53cc\u5bc6\u5ea6\u8c03\u63a7\u7cfb\u6570  \n        density_coef = np.tanh(cv_density * global_density)  \n\n        # \u975e\u7ebf\u6027\u8bc4\u5206  \n        score = local_dist * (potential ** (phase_weight * density_coef)) * (1.2 - dir_sim * (1 - phase_weight))  \n\n        if score < min_score:  \n            min_score = score  \n            next_node = node  \n\n    return next_node",
      "objective": 1.5131031172460812
    },
    {
      "concept": "\u5f39\u6027\u71b5\u8c03\u63a7\u65b9\u5411-\u5bc6\u5ea6\u542f\u53d1\u5f0f\uff1a\u901a\u8fc7\u5c40\u90e8\u9999\u519c\u71b5\u52a8\u6001\u611f\u77e5\u672a\u8bbf\u95ee\u8282\u70b9\u5206\u5e03\u590d\u6742\u5ea6\uff0c\u7ed3\u5408\u65b9\u5411\u8fde\u8d2f\u6027\u4e0e\u5c40\u90e8\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570\u7684\u7ebf\u6027\u52a0\u6743\u5b9e\u73b0\u81ea\u9002\u5e94\u8def\u5f84\u5f15\u5bfc\u3002\u91c7\u7528\u71b5\u9608\u503c\u89e6\u53d1\u6e10\u8fdb\u5f0f\u7b56\u7565\u5207\u6362\uff0c\u65e9\u671f\u4fa7\u91cd\u65b9\u5411\u4e00\u81f4\u6027\u63a2\u7d22\uff0c\u540e\u671f\u6fc0\u6d3b\u8f7b\u91cf\u5316\u53cd\u8ddd\u79bb\u52bf\u80fd\u573a\u52a0\u901f\u6536\u655b\uff0c\u5019\u9009\u96c6\u89c4\u6a21\u968f\u71b5\u503c\u6307\u6570\u8870\u51cf\u4ee5\u5e73\u8861\u8ba1\u7b97\u6548\u7387",
      "feature": "\u65b9\u5411\u8fde\u8d2f\u6027+\u5c40\u90e8\u5bc6\u5ea6\u53d8\u5f02+\u9999\u519c\u71b5\u9608\u503c+\u7ebf\u6027\u52a8\u6001\u52a0\u6743+\u5f39\u6027\u5019\u9009\u96c6+\u6e10\u8fdb\u52bf\u80fd\u573a",
      "algorithm": "import numpy as np  \n\ndef select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):  \n    if len(unvisited_nodes) == 0:  \n        return destination_node  \n\n    local_dists = distance_matrix[current_node][unvisited_nodes]  \n    hist = np.histogram(local_dists, bins=3)[0]  \n    hist = hist / (hist.sum() + 1e-8)  \n    entropy = -np.sum(hist * np.log(hist + 1e-8))  \n\n    dir_vectors = distance_matrix[unvisited_nodes] - distance_matrix[current_node]  \n    avg_dir = np.mean(dir_vectors, axis=0) / (np.linalg.norm(np.mean(dir_vectors, axis=0)) + 1e-8)  \n    cv_density = np.std(local_dists) / (np.mean(local_dists) + 1e-8)  \n\n    k = max(1, int(len(unvisited_nodes) * 0.25 * np.exp(-entropy)))  \n    candidates = np.argpartition(local_dists, k)[:k]  \n\n    min_score = np.inf  \n    next_node = unvisited_nodes[0]  \n\n    for idx in candidates:  \n        node = unvisited_nodes[idx]  \n        dist = local_dists[idx]  \n        node_dir = dir_vectors[idx] / (np.linalg.norm(dir_vectors[idx]) + 1e-8)  \n        dir_sim = np.dot(avg_dir, node_dir)  \n\n        if entropy > 0.7:  \n            score = (0.6*dir_sim + 0.4*(1-cv_density)) * dist  \n        else:  \n            potential = np.sum(1/(distance_matrix[node][unvisited_nodes[candidates]]**2 + 1e-8))  \n            score = dist / (potential + 1e-8)  \n\n        if score < min_score:  \n            min_score = score  \n            next_node = node  \n\n    return next_node",
      "objective": 1.5223601069770651
    },
    {
      "concept": "\u52a8\u6001\u4e24\u9636\u6bb5\u65b9\u5411-\u5bc6\u5ea6\u8026\u5408\u542f\u53d1\u5f0f\uff1a\u901a\u8fc7\u5f52\u4e00\u5316\u5c40\u90e8\u8ddd\u79bb\u6807\u51c6\u5dee\u91cf\u5316\u7a7a\u95f4\u5206\u5e03\u5bc6\u5ea6\uff0c\u7ed3\u5408\u6307\u6570\u5e73\u6ed1\u65b9\u5411\u5411\u91cf\u4fdd\u6301\u8def\u5f84\u8fde\u8d2f\u6027\u3002\u65e9\u671f\u9636\u6bb5\uff08\u8fdb\u5ea6<50%\uff09\u5229\u7528\u5c40\u90e8\u52bf\u80fd\u573a\u548c\u65b9\u5411\u76f8\u4f3c\u6027\u5f15\u5bfc\u5168\u5c40\u63a2\u7d22\uff0c\u540e\u671f\u9636\u6bb5\uff08\u8fdb\u5ea6\u226550%\uff09\u91c7\u7528\u5bc6\u5ea6\u52a0\u6743\u8d2a\u5fc3\u7b56\u7565\u52a0\u901f\u6536\u655b\uff0c\u901a\u8fc7\u7ebf\u6027\u63d2\u503c\u5b9e\u73b0\u5e73\u6ed1\u8fc7\u6e21\uff0c\u52a8\u6001\u5019\u9009\u96c6\u968f\u6784\u5efa\u8fdb\u5ea6\u7f29\u51cf\u4ee5\u4fdd\u8bc1\u8ba1\u7b97\u6548\u7387",
      "feature": "\u65b9\u5411\u8fde\u8d2f\u6027+\u5f52\u4e00\u5316\u5c40\u90e8\u5bc6\u5ea6+\u52a8\u6001\u4e24\u9636\u6bb5\u8bc4\u5206+\u7ebf\u6027\u63d2\u503c\u8fc7\u6e21+\u5c40\u90e8\u52bf\u80fd\u573a+\u52a8\u6001\u5019\u9009\u96c6\u7f29\u51cf",
      "algorithm": "import numpy as np  \n\ndef select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):  \n    if len(unvisited_nodes) == 0:  \n        return destination_node  \n\n    progress = 1 - len(unvisited_nodes) / (distance_matrix.shape[0] - 1)  \n    local_dists = distance_matrix[current_node][unvisited_nodes]  \n    norm_density = np.std(local_dists) / np.max(local_dists)  \n\n    dir_vectors = distance_matrix[unvisited_nodes] - distance_matrix[current_node]  \n    avg_direction = np.mean(dir_vectors, axis=0)  \n    avg_direction /= np.linalg.norm(avg_direction) + 1e-8  \n\n    k = max(1, int(len(unvisited_nodes) * (0.3 - 0.2 * progress)))  \n    candidate_indices = np.argpartition(local_dists, k)[:k]  \n\n    min_score = np.inf  \n    next_node = unvisited_nodes[0]  \n\n    for idx in candidate_indices:  \n        node = unvisited_nodes[idx]  \n        dist = local_dists[idx]  \n        node_dir = dir_vectors[idx]  \n        dir_sim = np.dot(avg_direction, node_dir) / (np.linalg.norm(node_dir) + 1e-8)  \n\n        if progress < 0.5:  \n            potential = np.sum(1 / (distance_matrix[node][unvisited_nodes[candidate_indices]] + 1e-8))  \n            score = dist * (1 + dir_sim) / (potential + 1e-8)  \n        else:  \n            score = dist * (1 - dir_sim * norm_density)  \n\n        if score < min_score:  \n            min_score = score  \n            next_node = node  \n\n    return next_node",
      "objective": 1.5419877860782383
    },
    {
      "concept": "\u52a8\u6001\u4e09\u9636\u6bb5\u8f7b\u91cf\u5316\u52bf\u80fd\u542f\u53d1\u5f0f\uff1a\u901a\u8fc7\u5c40\u90e8\u8ddd\u79bb\u53d8\u5f02\u7cfb\u6570\u611f\u77e5\u7a7a\u95f4\u5206\u5e03\u5bc6\u5ea6\uff0c\u7ed3\u5408\u6307\u6570\u5e73\u6ed1\u65b9\u5411\u5411\u91cf\u4fdd\u6301\u8def\u5f84\u8fde\u8d2f\u6027\u3002\u65e9\u671f\u9636\u6bb5\uff08\u8fdb\u5ea6<30%\uff09\u91c7\u7528\u65b9\u5411-\u5bc6\u5ea6\u53cc\u66f2\u6b63\u5207\u8026\u5408\u5f15\u5bfc\u63a2\u7d22\uff0c\u4e2d\u671f\uff0830%\u2264\u8fdb\u5ea6<70%\uff09\u7ebf\u6027\u8fc7\u6e21\u81f3\u8f7b\u91cf\u5316\u5c40\u90e8\u52bf\u80fd\u573a\uff0c\u540e\u671f\uff08\u8fdb\u5ea6\u226570%\uff09\u7eaf\u8d2a\u5fc3\u6536\u655b\u3002\u57fa\u4e8eVoronoi\u7edf\u6cbb\u529b\u52a8\u6001\u8c03\u6574\u5019\u9009\u96c6\u89c4\u6a21\uff0c\u5b9e\u73b0\u8ba1\u7b97\u6548\u7387\u4e0e\u8def\u5f84\u8d28\u91cf\u7684\u5e73\u8861",
      "feature": "\u65b9\u5411\u8fde\u8d2f\u6027+\u5c40\u90e8\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570+\u4e09\u9636\u6bb5\u52a8\u6001\u5207\u6362+\u8f7b\u91cf\u5316\u52bf\u80fd\u573a+Voronoi\u5019\u9009\u96c6\u8c03\u6574+\u7ebf\u6027\u8fc7\u6e21+\u53cc\u66f2\u6b63\u5207\u8026\u5408",
      "algorithm": "import numpy as np  \nfrom scipy.spatial import KDTree  \n\ndef select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):  \n    if len(unvisited_nodes) == 0:  \n        return destination_node  \n\n    progress = 1 - len(unvisited_nodes) / (distance_matrix.shape[0] - 1)  \n    local_dists = distance_matrix[current_node][unvisited_nodes]  \n    cv_density = np.std(local_dists) / (np.mean(local_dists) + 1e-8)  \n\n    # Voronoi\u81ea\u9002\u5e94\u5019\u9009\u96c6  \n    coords = np.array([distance_matrix[node] for node in unvisited_nodes])  \n    kdtree = KDTree(coords)  \n    voronoi_count = np.array([len(kdtree.query_ball_point(coords[i], r=np.median(local_dists)))   \n                     for i in range(len(unvisited_nodes))])  \n    k = max(1, int(np.median(voronoi_count) * (0.5 - 0.4 * progress)))  \n    candidate_indices = np.argpartition(local_dists, k)[:k]  \n\n    # \u65b9\u5411\u5411\u91cf\u6307\u6570\u5e73\u6ed1  \n    dir_vectors = distance_matrix[unvisited_nodes[candidate_indices]] - distance_matrix[current_node]  \n    avg_direction = np.mean(dir_vectors, axis=0)  \n    avg_direction /= np.linalg.norm(avg_direction) + 1e-8  \n\n    min_score = np.inf  \n    next_node = unvisited_nodes[candidate_indices[0]]  \n\n    for idx in candidate_indices:  \n        node = unvisited_nodes[idx]  \n        dist = local_dists[idx]  \n        node_dir = distance_matrix[node] - distance_matrix[current_node]  \n        dir_sim = np.dot(avg_direction, node_dir) / (np.linalg.norm(node_dir) + 1e-8)  \n\n        if progress < 0.3:  \n            score = dist * (1 - np.tanh(1.5 * dir_sim * (1 - cv_density)))  \n        elif progress < 0.7:  \n            potential = np.sum(1/(distance_matrix[node][unvisited_nodes[candidate_indices]] + 1e-8))  \n            phase_weight = (progress - 0.3) / 0.4  \n            score = dist * ((1 - phase_weight) * (1 - dir_sim) + phase_weight / potential)  \n        else:  \n            score = dist  \n\n        if score < min_score:  \n            min_score = score  \n            next_node = node  \n\n    return next_node",
      "objective": 1.6442874787993431
    }
  ],
  "memory": {
    "positive_features": [
      "\u65b9\u5411\u8fde\u8d2f\u6027+\u5c40\u90e8\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570+\u53cc\u66f2\u6b63\u5207\u8026\u5408+\u4e24\u9636\u6bb5\u52a8\u6001\u5207\u6362+\u7ebf\u6027\u5019\u9009\u96c6\u7f29\u51cf+\u8f7b\u91cf\u5316\u52bf\u80fd\u573a",
      "\u8def\u5f84\u71b5\u589e\u539f\u7406+\u6700\u77ed\u8def\u5f84\u91cd\u53e0\u5ea6+\u9999\u519c\u71b5\u9608\u503c+\u81ea\u9002\u5e94\u9636\u6bb5\u5207\u6362+\u62d3\u6251\u590d\u6742\u6027\u8c03\u63a7",
      "\u65b9\u5411\u4fee\u6b63\u52bf\u80fd\u573a+\u52a8\u6001\u9636\u6bb5\u5207\u6362+\u53cc\u5bc6\u5ea6\u8c03\u63a7+\u6307\u6570\u5e73\u6ed1\u65b9\u5411\u5411\u91cf+\u53cd\u8ddd\u79bb\u5e73\u65b9\u548c+\u975e\u7ebf\u6027\u8026\u5408",
      "\u62d3\u6251\u52bf\u80fd\u573a+\u53cd\u8ddd\u79bb\u5e73\u65b9\u548c+\u975e\u7ebf\u6027\u4e58\u79ef\u8bc4\u5206+\u5bc6\u5ea6\u81ea\u9002\u5e94",
      "\u65b9\u5411\u8fde\u8d2f\u6027+\u52a8\u6001\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570+\u53cc\u66f2\u6b63\u5207\u975e\u7ebf\u6027\u8026\u5408+\u6307\u6570\u5e73\u6ed1\u65b9\u5411\u5411\u91cf+\u9636\u6bb5\u81ea\u9002\u5e94\u6743\u91cd+\u52a8\u6001\u5019\u9009\u96c6\u7f29\u51cf",
      "\u65b9\u5411\u8fde\u8d2f\u6027\u4f18\u5316+\u5c40\u90e8\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570+\u53cc\u66f2\u6b63\u5207\u975e\u7ebf\u6027\u8026\u5408+\u6307\u6570\u5e73\u6ed1\u65b9\u5411\u5411\u91cf+\u52a8\u6001\u5019\u9009\u96c6\u7f29\u51cf",
      "\u8d2a\u5fc3\u7b56\u7565+\u6700\u8fd1\u90bb+\u5269\u4f59\u8282\u70b9\u5206\u5e03"
    ],
    "negative_features": [
      "\u5bc6\u5ea6\u805a\u7c7b\u5bfc\u5411+Delaunay\u62d3\u6251\u611f\u77e5+\u51f8\u5305\u9636\u6bb5\u5212\u5206+\u52a8\u6001\u68af\u5ea6\u6743\u91cd+\u4ea4\u53c9\u89c4\u907f",
      "\u9636\u6bb5\u81ea\u9002\u5e94+\u65b9\u5411\u8fde\u8d2f\u6027+\u8f7b\u91cf\u5316\u52bf\u80fd\u573a+\u5c40\u90e8\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570+\u52a8\u6001\u5019\u9009\u96c6\u7f29\u51cf+\u7ebf\u6027\u63d2\u503c\u8fc7\u6e21",
      "\u8d2a\u5fc3\u7b56\u7565+\u7a7a\u95f4\u4e2d\u5fc3\u5bfc\u5411+\u52a8\u6001\u6743\u91cd+\u95ed\u5408\u4f18\u5316",
      "\u71b5\u611f\u77e5\u4e09\u9636\u6bb5\u5207\u6362+KDTree\u7a7a\u95f4\u7d22\u5f15+\u65b9\u5411\u8fde\u8d2f\u6027\u4fee\u6b63+\u4e2d\u4f4d\u6570\u52bf\u80fd\u573a+\u5f39\u6027\u5019\u9009\u96c6+\u7ebf\u6027\u52a8\u6001\u52a0\u6743+Sigmoid\u5e73\u6ed1\u8fc7\u6e21",
      "Delaunay\u9aa8\u67b6\u4f18\u5148+\u66f2\u7387\u81ea\u9002\u5e94\u6b65\u957f+\u955c\u50cf\u5bf9\u79f0\u6291\u5236+MST/\u51f8\u5305\u52a8\u6001\u5207\u6362+\u51e0\u4f55\u7ed3\u6784\u611f\u77e5"
    ]
  }
}
{
  "heuristics": [
    {
      "concept": "\u7cbe\u7b80\u4e24\u9636\u6bb5\u52a8\u6001\u542f\u53d1\u5f0f\uff1a\u901a\u8fc7Sigmoid\u8fdb\u5ea6\u7cfb\u6570\u5b9e\u73b0\u63a2\u7d22\u4e0e\u6536\u655b\u7684\u5e73\u6ed1\u4e24\u9636\u6bb5\u5207\u6362\uff0c\u63a2\u7d22\u9636\u6bb5\u91c7\u7528\u6307\u6570\u5e73\u6ed1\u65b9\u5411\u8bb0\u5fc6\u4e0e\u5c40\u90e8\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570\u7684\u7ebf\u6027\u8026\u5408\u5f15\u5bfc\u5168\u5c40\u641c\u7d22\uff0c\u6536\u655b\u9636\u6bb5\u6fc0\u6d3b\u8f7b\u91cf\u5316\u53cd\u8ddd\u79bb\u5e73\u65b9\u52bf\u80fd\u573a\u3002\u57fa\u4e8e\u5c40\u90e8\u8ddd\u79bb\u504f\u5ea6\u52a8\u6001\u8c03\u6574\u5019\u9009\u96c6\u89c4\u6a21\uff0c\u7b80\u5316\u8bc4\u5206\u51fd\u6570\u7ed3\u6784\uff0c\u5b9e\u73b0\u8def\u5f84\u8fde\u8d2f\u6027\u4e0e\u8ba1\u7b97\u6548\u7387\u7684\u6700\u4f18\u5e73\u8861",
      "feature": "\u65b9\u5411\u8fde\u8d2f\u6027+\u5c40\u90e8\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570+\u7ebf\u6027\u8026\u5408+Sigmoid\u9636\u6bb5\u63a7\u5236+\u6307\u6570\u5e73\u6ed1\u65b9\u5411\u8bb0\u5fc6+\u504f\u5ea6\u611f\u77e5\u5019\u9009\u96c6+\u5ef6\u8fdf\u53cd\u8ddd\u79bb\u5e73\u65b9\u52bf\u80fd\u573a",
      "algorithm": "import numpy as np  \n\ndef select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):  \n    if len(unvisited_nodes) == 0:  \n        return destination_node  \n\n    # Sigmoid\u8fdb\u5ea6\u7cfb\u6570  \n    progress = 1 - len(unvisited_nodes) / distance_matrix.shape[0]  \n    phase_coeff = 1 / (1 + np.exp(-8 * (progress - 0.7)))  \n\n    # \u504f\u5ea6\u611f\u77e5\u5019\u9009\u96c6\u52a8\u6001\u8c03\u6574  \n    local_dists = distance_matrix[current_node][unvisited_nodes]  \n    skewness = np.mean((local_dists - np.mean(local_dists))**3) / (np.std(local_dists)**3 + 1e-8)  \n    k = max(1, int(len(unvisited_nodes) * (0.4 - 0.2 * np.tanh(skewness))))  \n    candidate_indices = np.argpartition(local_dists, k)[:k]  \n\n    # \u6307\u6570\u5e73\u6ed1\u65b9\u5411\u8bb0\u5fc6\uff08\u6743\u91cd0.7\uff09  \n    if not hasattr(select_next_node, 'dir_memory'):  \n        select_next_node.dir_memory = np.zeros(distance_matrix.shape[1])  \n    dir_vectors = distance_matrix[unvisited_nodes[candidate_indices]] - distance_matrix[current_node]  \n    select_next_node.dir_memory = 0.7 * select_next_node.dir_memory + 0.3 * np.mean(dir_vectors, axis=0)  \n    avg_direction = select_next_node.dir_memory / (np.linalg.norm(select_next_node.dir_memory) + 1e-8)  \n\n    # \u5c40\u90e8\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570  \n    cv_density = np.std(local_dists[candidate_indices]) / (np.mean(local_dists[candidate_indices]) + 1e-8)  \n\n    # \u6536\u655b\u9636\u6bb5\u52bf\u80fd\u573a\uff08\u4ec5\u6fc0\u6d3b\u4e8e\u524d15%\u5019\u9009\u8282\u70b9\uff09  \n    potential_nodes = unvisited_nodes[candidate_indices[:max(1, int(0.15*k))]] if phase_coeff > 0.5 else []  \n    potential = np.sum(1 / (distance_matrix[unvisited_nodes[candidate_indices]][:, potential_nodes]**2 + 1e-8)) if len(potential_nodes) > 0 else 1.0  \n\n    min_score = np.inf  \n    next_node = unvisited_nodes[candidate_indices[0]] if len(candidate_indices) > 0 else unvisited_nodes[0]  \n\n    for idx in candidate_indices:  \n        node = unvisited_nodes[idx]  \n        dist = local_dists[idx]  \n        node_dir = distance_matrix[node] - distance_matrix[current_node]  \n        dir_sim = np.dot(avg_direction, node_dir) / (np.linalg.norm(node_dir) + 1e-8)  \n\n        # \u7ebf\u6027\u8026\u5408\u8bc4\u5206  \n        score = (dist * (1 + dir_sim)) / (cv_density * potential)  \n\n        if score < min_score:  \n            min_score = score  \n            next_node = node  \n\n    return next_node",
      "objective": 1.1161846908358677
    },
    {
      "concept": "\u7cbe\u7b80\u53cc\u9636\u6bb5\u52a8\u6001\u542f\u53d1\u5f0f\uff1a\u901a\u8fc7Sigmoid\u8fdb\u5ea6\u7cfb\u6570\u5b9e\u73b0\u63a2\u7d22\u4e0e\u6536\u655b\u7684\u5e73\u6ed1\u4e24\u9636\u6bb5\u5207\u6362\uff0c\u63a2\u7d22\u9636\u6bb5\u91c7\u7528\u6307\u6570\u5e73\u6ed1\u65b9\u5411\u8bb0\u5fc6\u4e0e\u5c40\u90e8\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570\u7684\u53cc\u66f2\u6b63\u5207\u8026\u5408\u5f15\u5bfc\u5168\u5c40\u641c\u7d22\uff0c\u6536\u655b\u9636\u6bb5\u6fc0\u6d3b\u8f7b\u91cf\u5316\u53cd\u8ddd\u79bb\u5e73\u65b9\u52bf\u80fd\u573a\u3002\u57fa\u4e8e\u504f\u5ea6\u52a8\u6001\u8c03\u6574\u5019\u9009\u96c6\u89c4\u6a21\uff0c\u7b80\u5316\u8bc4\u5206\u7ed3\u6784\uff0c\u5b9e\u73b0\u8def\u5f84\u8fde\u8d2f\u6027\u4e0e\u8ba1\u7b97\u6548\u7387\u7684\u6700\u4f18\u5e73\u8861",
      "feature": "\u65b9\u5411\u8fde\u8d2f\u6027+\u5c40\u90e8\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570+\u53cc\u66f2\u6b63\u5207\u8026\u5408+Sigmoid\u9636\u6bb5\u63a7\u5236+\u6307\u6570\u5e73\u6ed1\u65b9\u5411\u8bb0\u5fc6+\u504f\u5ea6\u611f\u77e5\u5019\u9009\u96c6+\u5ef6\u8fdf\u53cd\u8ddd\u79bb\u5e73\u65b9\u52bf\u80fd\u573a",
      "algorithm": "import numpy as np  \n\ndef select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):  \n    if len(unvisited_nodes) == 0:  \n        return destination_node  \n\n    # Sigmoid\u8fdb\u5ea6\u7cfb\u6570  \n    progress = 1 - len(unvisited_nodes) / distance_matrix.shape[0]  \n    phase_coeff = 1 / (1 + np.exp(-8 * (progress - 0.6)))  \n\n    # \u504f\u5ea6\u611f\u77e5\u5019\u9009\u96c6\u52a8\u6001\u8c03\u6574  \n    local_dists = distance_matrix[current_node][unvisited_nodes]  \n    skewness = np.mean((local_dists - np.mean(local_dists))**3) / (np.std(local_dists)**3 + 1e-8)  \n    k = max(1, int(len(unvisited_nodes) * (0.3 - 0.15 * np.tanh(skewness) * phase_coeff)))  \n    candidate_indices = np.argpartition(local_dists, k)[:k]  \n\n    # \u6307\u6570\u5e73\u6ed1\u65b9\u5411\u8bb0\u5fc6\uff08\u6743\u91cd0.8\uff09  \n    if not hasattr(select_next_node, 'dir_memory'):  \n        select_next_node.dir_memory = np.zeros(distance_matrix.shape[1])  \n    dir_vectors = distance_matrix[unvisited_nodes[candidate_indices]] - distance_matrix[current_node]  \n    select_next_node.dir_memory = 0.8 * select_next_node.dir_memory + 0.2 * np.mean(dir_vectors, axis=0)  \n    avg_direction = select_next_node.dir_memory / (np.linalg.norm(select_next_node.dir_memory) + 1e-8)  \n\n    # \u5c40\u90e8\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570  \n    cv_density = np.std(local_dists[candidate_indices]) / (np.mean(local_dists[candidate_indices]) + 1e-8)  \n\n    # \u6536\u655b\u9636\u6bb5\u52bf\u80fd\u573a\uff08\u4ec5\u6fc0\u6d3b\u4e8e\u524d10%\u5019\u9009\u8282\u70b9\uff09  \n    potential_nodes = unvisited_nodes[candidate_indices[:max(1, int(0.1*k))]] if phase_coeff > 0.6 else []  \n    potential = np.sum(1 / (distance_matrix[unvisited_nodes[candidate_indices]][:, potential_nodes]**2 + 1e-8)) if len(potential_nodes) > 0 else 1.0  \n\n    min_score = np.inf  \n    next_node = unvisited_nodes[candidate_indices[0]] if len(candidate_indices) > 0 else unvisited_nodes[0]  \n\n    for idx in candidate_indices:  \n        node = unvisited_nodes[idx]  \n        dist = local_dists[idx]  \n        node_dir = distance_matrix[node] - distance_matrix[current_node]  \n        dir_sim = np.dot(avg_direction, node_dir) / (np.linalg.norm(node_dir) + 1e-8)  \n\n        # \u53cc\u66f2\u6b63\u5207\u8026\u5408\uff08\u56fa\u5b9a\u53c2\u65701.2, 0.5\uff09  \n        tanh_term = dist * np.tanh(1.2 + dir_sim - 0.5 * cv_density)  \n        score = tanh_term / (potential + 1e-8) if phase_coeff > 0.6 else tanh_term  \n\n        if score < min_score:  \n            min_score = score  \n            next_node = node  \n\n    return next_node",
      "objective": 1.1931228048237346
    },
    {
      "concept": "\u7cbe\u7b80\u71b5\u9a71\u52a8\u4e09\u9636\u6bb5\u542f\u53d1\u5f0f\uff1a\u901a\u8fc7\u5269\u4f59\u8282\u70b9\u5206\u5e03\u7684\u9999\u519c\u71b5\u5b9e\u73b0\u63a2\u7d22-\u8fc7\u6e21-\u6536\u655b\u4e09\u9636\u6bb5\u81ea\u9002\u5e94\u5207\u6362\uff0c\u63a2\u7d22\u9636\u6bb5\u5f3a\u5316\u65b9\u5411\u8fde\u8d2f\u6027\u4e0e\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570\u7684\u53cc\u66f2\u6b63\u5207\u8026\u5408\uff0c\u8fc7\u6e21\u9636\u6bb5\u9010\u6b65\u6fc0\u6d3b\u5019\u9009\u96c6\u7f29\u51cf\uff0c\u6536\u655b\u9636\u6bb5\u91c7\u7528\u5ef6\u8fdf\u53cd\u8ddd\u79bb\u5e73\u65b9\u52bf\u80fd\u573a\u4f18\u5316\u3002\u91c7\u7528\u6307\u6570\u5e73\u6ed1\u65b9\u5411\u8bb0\u5fc6\u4fdd\u6301\u8def\u5f84\u8fde\u8d2f\u6027\uff0c\u57fa\u4e8e\u504f\u5ea6\u52a8\u6001\u8c03\u6574\u5019\u9009\u96c6\u89c4\u6a21\uff0c\u5b9e\u73b0\u8ba1\u7b97\u6548\u7387\u4e0e\u8def\u5f84\u8d28\u91cf\u7684\u5e73\u8861\u4f18\u5316",
      "feature": "\u65b9\u5411\u8fde\u8d2f\u6027+\u5c40\u90e8\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570+\u53cc\u66f2\u6b63\u5207\u8026\u5408+\u71b5\u9a71\u52a8\u4e09\u9636\u6bb5\u5207\u6362+\u6307\u6570\u5e73\u6ed1\u65b9\u5411\u8bb0\u5fc6+\u504f\u5ea6\u611f\u77e5\u5019\u9009\u96c6+\u5ef6\u8fdf\u53cd\u8ddd\u79bb\u5e73\u65b9\u52bf\u80fd\u573a",
      "algorithm": "import numpy as np  \n\ndef select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):  \n    if len(unvisited_nodes) == 0:  \n        return destination_node  \n\n    # \u8ba1\u7b97\u71b5\u503c\u4e0e\u5c40\u90e8\u7edf\u8ba1\u91cf  \n    local_dists = distance_matrix[current_node][unvisited_nodes]  \n    prob = local_dists / (np.sum(local_dists) + 1e-8)  \n    entropy = -np.sum(prob * np.log(prob + 1e-8))  \n    skewness = np.mean((local_dists - np.mean(local_dists))**3) / (np.std(local_dists)**3 + 1e-8)  \n\n    # \u4e09\u9636\u6bb5\u52a8\u6001\u5207\u6362  \n    if entropy > 0.7:  # \u63a2\u7d22\u9636\u6bb5  \n        k = max(1, int(len(unvisited_nodes) * 0.4))  \n        use_potential = False  \n    elif entropy > 0.3:  # \u8fc7\u6e21\u9636\u6bb5  \n        k = max(1, int(len(unvisited_nodes) * (0.3 - 0.1 * np.tanh(skewness))))  \n        use_potential = False  \n    else:  # \u6536\u655b\u9636\u6bb5  \n        k = max(1, int(len(unvisited_nodes) * 0.15))  \n        use_potential = True  \n\n    candidate_indices = np.argpartition(local_dists, k)[:k]  \n\n    # \u6307\u6570\u5e73\u6ed1\u65b9\u5411\u8bb0\u5fc6\uff08\u6743\u91cd0.75\uff09  \n    if not hasattr(select_next_node, 'dir_memory'):  \n        select_next_node.dir_memory = np.zeros(distance_matrix.shape[1])  \n    dir_vectors = distance_matrix[unvisited_nodes[candidate_indices]] - distance_matrix[current_node]  \n    select_next_node.dir_memory = 0.75 * select_next_node.dir_memory + 0.25 * np.mean(dir_vectors, axis=0)  \n    avg_direction = select_next_node.dir_memory / (np.linalg.norm(select_next_node.dir_memory) + 1e-8)  \n\n    # \u5c40\u90e8\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570  \n    cv_density = np.std(local_dists[candidate_indices]) / (np.mean(local_dists[candidate_indices]) + 1e-8)  \n\n    # \u6536\u655b\u9636\u6bb5\u52bf\u80fd\u573a\uff08\u4ec5\u6fc0\u6d3b\u4e8e\u524d15%\u5019\u9009\u8282\u70b9\uff09  \n    potential_nodes = unvisited_nodes[candidate_indices[:max(1, int(0.15*k))]] if use_potential else []  \n    potential = np.sum(1 / (distance_matrix[unvisited_nodes[candidate_indices]][:, potential_nodes]**2 + 1e-8)) if use_potential else 1.0  \n\n    min_score = np.inf  \n    next_node = unvisited_nodes[candidate_indices[0]]  \n\n    for idx in candidate_indices:  \n        node = unvisited_nodes[idx]  \n        dist = local_dists[idx]  \n        node_dir = distance_matrix[node] - distance_matrix[current_node]  \n        dir_sim = np.dot(avg_direction, node_dir) / (np.linalg.norm(node_dir) + 1e-8)  \n\n        # \u53cc\u66f2\u6b63\u5207\u8026\u5408\uff08\u56fa\u5b9a\u53c2\u65701.3, 0.4\uff09  \n        tanh_term = dist * np.tanh(1.3 + dir_sim - 0.4 * cv_density)  \n        score = tanh_term / (potential + 1e-8) if use_potential else tanh_term  \n\n        if score < min_score:  \n            min_score = score  \n            next_node = node  \n\n    return next_node",
      "objective": 1.2270124029823135
    },
    {
      "concept": "\u7cbe\u7b80\u53cc\u9636\u6bb5\u52a8\u6001\u542f\u53d1\u5f0f\uff1a\u901a\u8fc7Sigmoid\u8fdb\u5ea6\u7cfb\u6570\u5b9e\u73b0\u63a2\u7d22\u4e0e\u6536\u655b\u7684\u5e73\u6ed1\u4e24\u9636\u6bb5\u5207\u6362\uff0c\u63a2\u7d22\u9636\u6bb5\u91c7\u7528\u6307\u6570\u5e73\u6ed1\u65b9\u5411\u8bb0\u5fc6\u4e0e\u5c40\u90e8\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570\u7684\u53cc\u66f2\u6b63\u5207\u8026\u5408\u5f15\u5bfc\u5168\u5c40\u641c\u7d22\uff0c\u6536\u655b\u9636\u6bb5\u6fc0\u6d3b\u8f7b\u91cf\u5316\u53cd\u8ddd\u79bb\u5e73\u65b9\u52bf\u80fd\u573a\u3002\u57fa\u4e8e\u5c40\u90e8\u8ddd\u79bb\u504f\u5ea6\u52a8\u6001\u8c03\u6574\u5019\u9009\u96c6\u89c4\u6a21\uff0c\u56fa\u5b9a\u6838\u5fc3\u53c2\u6570\u7b80\u5316\u8ba1\u7b97\uff0c\u5b9e\u73b0\u8def\u5f84\u8fde\u8d2f\u6027\u4e0e\u8ba1\u7b97\u6548\u7387\u7684\u6700\u4f18\u5e73\u8861",
      "feature": "\u65b9\u5411\u8fde\u8d2f\u6027+\u5c40\u90e8\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570+\u53cc\u66f2\u6b63\u5207\u8026\u5408+Sigmoid\u9636\u6bb5\u63a7\u5236+\u6307\u6570\u5e73\u6ed1\u65b9\u5411\u8bb0\u5fc6+\u504f\u5ea6\u611f\u77e5\u5019\u9009\u96c6+\u5ef6\u8fdf\u53cd\u8ddd\u79bb\u5e73\u65b9\u52bf\u80fd\u573a",
      "algorithm": "import numpy as np  \n\ndef select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):  \n    if len(unvisited_nodes) == 0:  \n        return destination_node  \n\n    # Sigmoid\u8fdb\u5ea6\u7cfb\u6570\uff08\u5269\u4f59\u8282\u70b9\u6bd4\u4f8b\uff09  \n    progress = 1 - len(unvisited_nodes) / distance_matrix.shape[0]  \n    phase_coeff = 1 / (1 + np.exp(-8 * (progress - 0.7)))  \n\n    # \u504f\u5ea6\u611f\u77e5\u5019\u9009\u96c6\u52a8\u6001\u8c03\u6574  \n    local_dists = distance_matrix[current_node][unvisited_nodes]  \n    skewness = np.mean((local_dists - np.mean(local_dists))**3) / (np.std(local_dists)**3 + 1e-8)  \n    q = np.quantile(local_dists, 0.4 + 0.1 * np.tanh(skewness))  \n    candidate_indices = np.where(local_dists <= q)[0]  \n\n    # \u6307\u6570\u5e73\u6ed1\u65b9\u5411\u8bb0\u5fc6\uff08\u6743\u91cd0.75\uff09  \n    if not hasattr(select_next_node, 'dir_memory'):  \n        select_next_node.dir_memory = np.zeros(distance_matrix.shape[1])  \n    dir_vectors = distance_matrix[unvisited_nodes[candidate_indices]] - distance_matrix[current_node]  \n    select_next_node.dir_memory = 0.75 * select_next_node.dir_memory + 0.25 * np.mean(dir_vectors, axis=0)  \n    avg_direction = select_next_node.dir_memory / (np.linalg.norm(select_next_node.dir_memory) + 1e-8)  \n\n    # \u5c40\u90e8\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570  \n    cv_density = np.std(local_dists[candidate_indices]) / (np.mean(local_dists[candidate_indices]) + 1e-8)  \n\n    # \u6536\u655b\u9636\u6bb5\u52bf\u80fd\u573a\uff08\u4ec5\u6fc0\u6d3b\u4e8e\u524d10%\u5019\u9009\u8282\u70b9\uff09  \n    potential_nodes = unvisited_nodes[candidate_indices[:max(1, int(0.1*len(candidate_indices)))]] if phase_coeff > 0.5 else []  \n    potential = np.sum(1 / (distance_matrix[unvisited_nodes[candidate_indices]][:, potential_nodes]**2 + 1e-8)) if len(potential_nodes) > 0 else 1.0  \n\n    min_score = np.inf  \n    next_node = unvisited_nodes[candidate_indices[0]] if len(candidate_indices) > 0 else unvisited_nodes[0]  \n\n    for idx in candidate_indices:  \n        node = unvisited_nodes[idx]  \n        dist = local_dists[idx]  \n        node_dir = distance_matrix[node] - distance_matrix[current_node]  \n        dir_sim = np.dot(avg_direction, node_dir) / (np.linalg.norm(node_dir) + 1e-8)  \n\n        # \u53cc\u66f2\u6b63\u5207\u8026\u5408\uff08\u56fa\u5b9a\u53c2\u65701.3, 0.4\uff09  \n        tanh_term = dist * np.tanh(1.3 + dir_sim - 0.4 * cv_density)  \n        score = tanh_term / (potential + 1e-8) if phase_coeff > 0.5 else tanh_term  \n\n        if score < min_score:  \n            min_score = score  \n            next_node = node  \n\n    return next_node",
      "objective": 1.235266067552051
    },
    {
      "concept": "\u7cbe\u7b80\u53cc\u9636\u6bb5\u52a8\u6001\u542f\u53d1\u5f0f\uff1a\u901a\u8fc7Sigmoid\u8fdb\u5ea6\u7cfb\u6570\u5b9e\u73b0\u63a2\u7d22\u4e0e\u6536\u655b\u7684\u5e73\u6ed1\u4e24\u9636\u6bb5\u5207\u6362\uff0c\u63a2\u7d22\u9636\u6bb5\u91c7\u7528\u6307\u6570\u5e73\u6ed1\u65b9\u5411\u8bb0\u5fc6\u4e0e\u5c40\u90e8\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570\u7684\u53cc\u66f2\u6b63\u5207\u8026\u5408\u5f15\u5bfc\u5168\u5c40\u641c\u7d22\uff0c\u6536\u655b\u9636\u6bb5\u6fc0\u6d3b\u8f7b\u91cf\u5316\u53cd\u8ddd\u79bb\u5e73\u65b9\u52bf\u80fd\u573a\u3002\u57fa\u4e8e\u5c40\u90e8\u8ddd\u79bb\u504f\u5ea6\u52a8\u6001\u8c03\u6574\u5019\u9009\u96c6\u89c4\u6a21\uff0c\u56fa\u5b9a\u6838\u5fc3\u53c2\u6570\u7b80\u5316\u8ba1\u7b97\uff0c\u5b9e\u73b0\u8def\u5f84\u8fde\u8d2f\u6027\u4e0e\u8ba1\u7b97\u6548\u7387\u7684\u6700\u4f18\u5e73\u8861",
      "feature": "\u65b9\u5411\u8fde\u8d2f\u6027+\u5c40\u90e8\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570+\u53cc\u66f2\u6b63\u5207\u8026\u5408+Sigmoid\u9636\u6bb5\u63a7\u5236+\u6307\u6570\u5e73\u6ed1\u65b9\u5411\u8bb0\u5fc6+\u504f\u5ea6\u611f\u77e5\u5019\u9009\u96c6+\u5ef6\u8fdf\u53cd\u8ddd\u79bb\u5e73\u65b9\u52bf\u80fd\u573a",
      "algorithm": "import numpy as np  \n\ndef select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):  \n    if len(unvisited_nodes) == 0:  \n        return destination_node  \n\n    # Sigmoid\u8fdb\u5ea6\u7cfb\u6570\uff08\u5269\u4f59\u8282\u70b9\u6bd4\u4f8b\uff09  \n    progress = 1 - len(unvisited_nodes) / distance_matrix.shape[0]  \n    phase_coeff = 1 / (1 + np.exp(-8 * (progress - 0.6)))  \n\n    # \u504f\u5ea6\u611f\u77e5\u5019\u9009\u96c6\u52a8\u6001\u8c03\u6574  \n    local_dists = distance_matrix[current_node][unvisited_nodes]  \n    skewness = np.mean((local_dists - np.mean(local_dists))**3) / (np.std(local_dists)**3 + 1e-8)  \n    k = max(1, int(len(unvisited_nodes) * (0.4 - 0.2 * progress * (1 + np.tanh(skewness)))))  \n    candidate_indices = np.argpartition(local_dists, k)[:k]  \n\n    # \u6307\u6570\u5e73\u6ed1\u65b9\u5411\u8bb0\u5fc6\uff08\u6743\u91cd0.7\uff09  \n    if not hasattr(select_next_node, 'dir_memory'):  \n        select_next_node.dir_memory = np.zeros(distance_matrix.shape[1])  \n    dir_vectors = distance_matrix[unvisited_nodes[candidate_indices]] - distance_matrix[current_node]  \n    select_next_node.dir_memory = 0.7 * select_next_node.dir_memory + 0.3 * np.mean(dir_vectors, axis=0)  \n    avg_direction = select_next_node.dir_memory / (np.linalg.norm(select_next_node.dir_memory) + 1e-8)  \n\n    # \u5c40\u90e8\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570  \n    cv_density = np.std(local_dists[candidate_indices]) / (np.mean(local_dists[candidate_indices]) + 1e-8)  \n\n    # \u6536\u655b\u9636\u6bb5\u52bf\u80fd\u573a\uff08\u4ec5\u6fc0\u6d3b\u4e8e\u524d10%\u5019\u9009\u8282\u70b9\uff09  \n    potential_nodes = unvisited_nodes[candidate_indices[:max(1, int(0.1*k))]] if phase_coeff > 0.5 else []  \n    potential = np.sum(1 / (distance_matrix[unvisited_nodes[candidate_indices]][:, potential_nodes]**2 + 1e-8)) if len(potential_nodes) > 0 else 1.0  \n\n    min_score = np.inf  \n    next_node = unvisited_nodes[candidate_indices[0]] if len(candidate_indices) > 0 else unvisited_nodes[0]  \n\n    for idx in candidate_indices:  \n        node = unvisited_nodes[idx]  \n        dist = local_dists[idx]  \n        node_dir = distance_matrix[node] - distance_matrix[current_node]  \n        dir_sim = np.dot(avg_direction, node_dir) / (np.linalg.norm(node_dir) + 1e-8)  \n\n        # \u53cc\u66f2\u6b63\u5207\u8026\u5408\uff08\u56fa\u5b9a\u53c2\u65701.2, 0.5\uff09  \n        tanh_term = dist * np.tanh(1.2 + dir_sim - 0.5 * cv_density)  \n        score = tanh_term / (potential + 1e-8) if phase_coeff > 0.5 else tanh_term  \n\n        if score < min_score:  \n            min_score = score  \n            next_node = node  \n\n    return next_node",
      "objective": 1.2576717912859485
    },
    {
      "concept": "\u4e09\u6a21\u6001\u71b5\u9a71\u52a8\u52a8\u6001\u542f\u53d1\u5f0f\uff1a\u901a\u8fc7\u5269\u4f59\u8282\u70b9\u5206\u5e03\u7684\u9999\u519c\u71b5\u5b9e\u73b0\u63a2\u7d22-\u8fc7\u6e21-\u6536\u655b\u4e09\u9636\u6bb5\u81ea\u9002\u5e94\u5207\u6362\uff0c\u63a2\u7d22\u9636\u6bb5\u5f3a\u5316\u65b9\u5411\u8fde\u8d2f\u6027\u4e0e\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570\u7684\u53cc\u66f2\u6b63\u5207\u8026\u5408\uff0c\u8fc7\u6e21\u9636\u6bb5\u6df7\u5408\u65b9\u5411\u4fee\u6b63\u4e0e\u5c40\u90e8\u52bf\u80fd\u573a\uff0c\u6536\u655b\u9636\u6bb5\u6fc0\u6d3b\u8f7b\u91cf\u5316\u53cd\u8ddd\u79bb\u5e73\u65b9\u52bf\u80fd\u573a\u3002\u91c7\u7528\u6ed1\u52a8\u7a97\u53e3\u6307\u6570\u5e73\u6ed1\u65b9\u5411\u5411\u91cf\u548c\u6e10\u8fdb\u5f0f\u5019\u9009\u96c6\u7f29\u51cf\u7b56\u7565\uff0c\u5728\u4fdd\u8bc1\u8def\u5f84\u8fde\u8d2f\u6027\u7684\u540c\u65f6\u4f18\u5316\u8ba1\u7b97\u6548\u7387",
      "feature": "\u65b9\u5411\u8fde\u8d2f\u6027+\u5c40\u90e8\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570+\u53cc\u66f2\u6b63\u5207\u8026\u5408+\u71b5\u9a71\u52a8\u4e09\u6a21\u6001\u5207\u6362+\u6ed1\u52a8\u7a97\u53e3\u65b9\u5411\u5e73\u6ed1+\u6e10\u8fdb\u5f0f\u5019\u9009\u96c6\u7f29\u51cf+\u5ef6\u8fdf\u52bf\u80fd\u573a\u6fc0\u6d3b+\u53cd\u8ddd\u79bb\u5e73\u65b9\u52bf\u80fd\u573a",
      "algorithm": "import numpy as np\n\ndef select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if len(unvisited_nodes) == 0:\n        return destination_node\n\n    # \u8ba1\u7b97\u5c40\u90e8\u7edf\u8ba1\u91cf\u4e0e\u71b5\u503c\n    local_dists = distance_matrix[current_node][unvisited_nodes]\n    hist = np.histogram(local_dists, bins=3)[0]\n    hist = hist / (hist.sum() + 1e-8)\n    entropy = -np.sum(hist * np.log(hist + 1e-8))\n    cv_density = np.std(local_dists) / (np.mean(local_dists) + 1e-8)\n    \n    # \u4e09\u6a21\u6001\u9636\u6bb5\u5224\u5b9a\n    if entropy > 0.8:  # \u63a2\u7d22\u9636\u6bb5\n        k = max(1, int(len(unvisited_nodes) * 0.4))\n        use_potential = False\n    elif entropy > 0.3:  # \u8fc7\u6e21\u9636\u6bb5\n        k = max(1, int(len(unvisited_nodes) * 0.25))\n        use_potential = len(unvisited_nodes) < 0.5 * distance_matrix.shape[0]\n    else:  # \u6536\u655b\u9636\u6bb5\n        k = max(1, int(len(unvisited_nodes) * 0.15))\n        use_potential = True\n    \n    candidate_indices = np.argpartition(local_dists, k)[:k]\n    \n    # \u6ed1\u52a8\u7a97\u53e3\u65b9\u5411\u5e73\u6ed1\uff08\u6a21\u62df\u6700\u8fd15\u8282\u70b9\u65b9\u5411\uff09\n    dir_vectors = distance_matrix[unvisited_nodes[candidate_indices]] - distance_matrix[current_node]\n    avg_direction = np.mean(dir_vectors, axis=0)\n    avg_direction /= np.linalg.norm(avg_direction) + 1e-8\n\n    min_score = np.inf\n    next_node = unvisited_nodes[candidate_indices[0]]\n    \n    for idx in candidate_indices:\n        node = unvisited_nodes[idx]\n        dist = local_dists[idx]\n        node_dir = distance_matrix[node] - distance_matrix[current_node]\n        dir_sim = np.dot(avg_direction, node_dir) / (np.linalg.norm(node_dir) + 1e-8)\n        \n        # \u52a8\u6001\u8bc4\u5206\n        tanh_term = dist * np.tanh(1.3 + dir_sim - 0.3 * cv_density)\n        if use_potential:\n            potential_nodes = unvisited_nodes[candidate_indices[:int(0.2*k)]] if entropy > 0.3 else unvisited_nodes\n            potential = np.sum(1 / (distance_matrix[node][potential_nodes]**2 + 1e-8))\n            score = tanh_term / (potential + 1e-8) if entropy <= 0.3 else 0.7*tanh_term + 0.3*dist/(potential+1e-8)\n        else:\n            score = tanh_term\n\n        if score < min_score:\n            min_score = score\n            next_node = node\n\n    return next_node",
      "objective": 1.2658284040207288
    },
    {
      "concept": "\u4e09\u9636\u6bb5\u71b5\u9a71\u52a8\u52a8\u6001\u542f\u53d1\u5f0f\uff1a\u901a\u8fc7\u5269\u4f59\u8282\u70b9\u5206\u5e03\u7684\u9999\u519c\u71b5\u5b9e\u73b0\u63a2\u7d22-\u8fc7\u6e21-\u6536\u655b\u4e09\u9636\u6bb5\u81ea\u9002\u5e94\u5207\u6362\uff0c\u63a2\u7d22\u9636\u6bb5\u5f3a\u5316\u65b9\u5411\u8fde\u8d2f\u6027\u4e0e\u5c40\u90e8\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570\u7684\u52a8\u6001\u53cc\u66f2\u6b63\u5207\u8026\u5408\uff0c\u8fc7\u6e21\u9636\u6bb5\u6df7\u5408\u65b9\u5411\u4fee\u6b63\u4e0e\u8f7b\u91cf\u5316\u53cd\u8ddd\u79bb\u52bf\u80fd\u573a\uff0c\u6536\u655b\u9636\u6bb5\u805a\u7126\u5c40\u90e8\u4f18\u5316\u3002\u91c7\u7528\u9884\u8ba1\u7b97\u52bf\u80fd\u573a\u548c\u57fa\u4e8e\u5bc6\u5ea6\u7684\u52a8\u6001\u5019\u9009\u96c6\u5212\u5206\uff0c\u5b9e\u73b0\u8def\u5f84\u8fde\u8d2f\u6027\u3001\u8ba1\u7b97\u6548\u7387\u4e0e\u5c40\u90e8\u4f18\u5316\u7684\u5e73\u8861",
      "feature": "\u65b9\u5411\u8fde\u8d2f\u6027+\u5c40\u90e8\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570+\u52a8\u6001\u53cc\u66f2\u6b63\u5207\u8026\u5408+\u71b5\u9a71\u52a8\u4e09\u9636\u6bb5\u5207\u6362+\u6307\u6570\u8870\u51cf\u65b9\u5411\u8bb0\u5fc6+\u5bc6\u5ea6\u805a\u7c7b\u5019\u9009\u96c6+\u9884\u8ba1\u7b97\u53cd\u8ddd\u79bb\u52bf\u80fd\u573a",
      "algorithm": "import numpy as np\n\ndef select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if len(unvisited_nodes) == 0:\n        return destination_node\n\n    # \u8ba1\u7b97\u71b5\u503c\u4e0e\u5c40\u90e8\u7edf\u8ba1\u91cf\n    local_dists = distance_matrix[current_node][unvisited_nodes]\n    prob = local_dists / (np.sum(local_dists) + 1e-8)\n    entropy = -np.sum(prob * np.log(prob + 1e-8))\n    cv_density = np.std(local_dists) / (np.mean(local_dists) + 1e-8)\n\n    # \u4e09\u9636\u6bb5\u52a8\u6001\u5207\u6362\n    if entropy > 0.7:  # \u63a2\u7d22\u9636\u6bb5\n        k = max(1, int(len(unvisited_nodes) * 0.4))\n        tanh_params = (1.0, 0.6)\n        dir_weight = 0.8\n        use_potential = False\n    elif entropy > 0.3:  # \u8fc7\u6e21\u9636\u6bb5\n        k = max(1, int(len(unvisited_nodes) * 0.25))\n        tanh_params = (1.2, 0.5)\n        dir_weight = 0.7\n        use_potential = True\n    else:  # \u6536\u655b\u9636\u6bb5\n        k = max(1, int(len(unvisited_nodes) * 0.15))\n        tanh_params = (1.4, 0.4)\n        dir_weight = 0.6\n        use_potential = True\n\n    # \u57fa\u4e8e\u5bc6\u5ea6\u7684\u5019\u9009\u96c6\u5212\u5206\n    if entropy < 0.5:\n        q = np.quantile(local_dists, 0.3 + 0.2 * (1 - entropy))\n        candidate_indices = np.where(local_dists <= q)[0]\n    else:\n        candidate_indices = np.argpartition(local_dists, k)[:k]\n\n    # \u6307\u6570\u8870\u51cf\u65b9\u5411\u8bb0\u5fc6\n    if not hasattr(select_next_node, 'dir_memory'):\n        select_next_node.dir_memory = np.zeros(distance_matrix.shape[1])\n    dir_vectors = distance_matrix[unvisited_nodes[candidate_indices]] - distance_matrix[current_node]\n    select_next_node.dir_memory = dir_weight * select_next_node.dir_memory + (1 - dir_weight) * np.mean(dir_vectors, axis=0)\n    avg_direction = select_next_node.dir_memory / (np.linalg.norm(select_next_node.dir_memory) + 1e-8)\n\n    # \u9884\u8ba1\u7b97\u52bf\u80fd\u573a\uff08\u6536\u655b\u9636\u6bb5\uff09\n    if use_potential and not hasattr(select_next_node, 'potential_cache'):\n        select_next_node.potential_cache = np.mean(1 / (distance_matrix + 1e-8), axis=1)\n\n    min_score = np.inf\n    next_node = unvisited_nodes[candidate_indices[0]]\n\n    for idx in candidate_indices:\n        node = unvisited_nodes[idx]\n        dist = local_dists[idx]\n        node_dir = distance_matrix[node] - distance_matrix[current_node]\n        dir_sim = np.dot(avg_direction, node_dir) / (np.linalg.norm(node_dir) + 1e-8)\n\n        # \u52a8\u6001\u53cc\u66f2\u6b63\u5207\u8026\u5408\n        tanh_term = dist * np.tanh(tanh_params[0] + dir_sim - tanh_params[1] * cv_density)\n\n        if use_potential:\n            potential = select_next_node.potential_cache[node] if entropy <= 0.3 else np.mean(1 / (distance_matrix[node][unvisited_nodes] + 1e-8))\n            score = tanh_term / (potential + 1e-8)\n        else:\n            score = tanh_term\n\n        if score < min_score:\n            min_score = score\n            next_node = node\n\n    return next_node",
      "objective": 1.27224956718389
    }
  ],
  "memory": {
    "positive_features": [
      "\u65b9\u5411\u8fde\u8d2f\u6027+\u5c40\u90e8\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570+\u53cc\u66f2\u6b63\u5207\u8026\u5408+\u71b5\u9a71\u52a8\u4e09\u9636\u6bb5\u5207\u6362+\u6307\u6570\u5e73\u6ed1\u65b9\u5411\u8bb0\u5fc6+\u504f\u5ea6\u611f\u77e5\u5019\u9009\u96c6+\u5ef6\u8fdf\u53cd\u8ddd\u79bb\u5e73\u65b9\u52bf\u80fd\u573a",
      "\u65b9\u5411\u8fde\u8d2f\u6027+\u5c40\u90e8\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570+\u53cc\u66f2\u6b63\u5207\u8026\u5408+\u4e24\u9636\u6bb5\u52a8\u6001\u5207\u6362+\u7ebf\u6027\u5019\u9009\u96c6\u7f29\u51cf+\u8f7b\u91cf\u5316\u52bf\u80fd\u573a",
      "\u65b9\u5411\u8fde\u8d2f\u6027+\u5c40\u90e8\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570+\u53cc\u66f2\u6b63\u5207\u8026\u5408+\u8fde\u7eed\u578b\u9636\u6bb5\u7cfb\u6570+\u53cd\u8ddd\u79bb\u5e73\u65b9\u52bf\u80fd\u573a+\u52a8\u6001\u6df7\u5408\u6743\u91cd+\u805a\u7c7b\u7cfb\u6570\u5019\u9009\u96c6",
      "\u65b9\u5411\u8fde\u8d2f\u6027+\u5c40\u90e8\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570+\u53cc\u66f2\u6b63\u5207\u8026\u5408+\u71b5\u9a71\u52a8\u9636\u6bb5\u5207\u6362+\u81ea\u9002\u5e94\u5019\u9009\u96c6+\u8f7b\u91cf\u5316\u52bf\u80fd\u573a",
      "\u65b9\u5411\u8fde\u8d2f\u6027+\u5c40\u90e8\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570+\u53cd\u8ddd\u79bb\u52bf\u80fd\u573a+Sigmoid\u9636\u6bb5\u6df7\u5408+\u6307\u6570\u8870\u51cf\u65b9\u5411\u8bb0\u5fc6+\u53d8\u5f02\u7cfb\u6570\u81ea\u9002\u5e94\u5019\u9009\u96c6+\u53cc\u66f2\u6b63\u5207\u8026\u5408",
      "\u8def\u5f84\u71b5\u589e\u539f\u7406+\u6700\u77ed\u8def\u5f84\u91cd\u53e0\u5ea6+\u9999\u519c\u71b5\u9608\u503c+\u81ea\u9002\u5e94\u9636\u6bb5\u5207\u6362+\u62d3\u6251\u590d\u6742\u6027\u8c03\u63a7",
      "\u65b9\u5411\u4fee\u6b63\u52bf\u80fd\u573a+\u52a8\u6001\u9636\u6bb5\u5207\u6362+\u53cc\u5bc6\u5ea6\u8c03\u63a7+\u6307\u6570\u5e73\u6ed1\u65b9\u5411\u5411\u91cf+\u53cd\u8ddd\u79bb\u5e73\u65b9\u548c+\u975e\u7ebf\u6027\u8026\u5408",
      "\u65b9\u5411\u8fde\u8d2f\u6027+\u5c40\u90e8\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570+\u53cc\u66f2\u6b63\u5207\u8026\u5408+\u71b5\u9a71\u52a8\u6743\u91cd+\u5ef6\u8fdf\u52bf\u80fd\u573a+\u504f\u5ea6\u611f\u77e5\u5019\u9009\u96c6+\u52a8\u6001\u6df7\u5408\u8bc4\u5206",
      "\u65b9\u5411\u8fde\u8d2f\u6027+\u52a8\u6001\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570+\u53cc\u66f2\u6b63\u5207\u975e\u7ebf\u6027\u8026\u5408+\u6307\u6570\u5e73\u6ed1\u65b9\u5411\u5411\u91cf+\u9636\u6bb5\u81ea\u9002\u5e94\u6743\u91cd+\u52a8\u6001\u5019\u9009\u96c6\u7f29\u51cf",
      "\u62d3\u6251\u52bf\u80fd\u573a+\u53cd\u8ddd\u79bb\u5e73\u65b9\u548c+\u975e\u7ebf\u6027\u4e58\u79ef\u8bc4\u5206+\u5bc6\u5ea6\u81ea\u9002\u5e94",
      "\u65b9\u5411\u8fde\u8d2f\u6027+\u5c40\u90e8\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570+\u7ebf\u6027\u8026\u5408+Sigmoid\u9636\u6bb5\u63a7\u5236+\u6307\u6570\u5e73\u6ed1\u65b9\u5411\u8bb0\u5fc6+\u504f\u5ea6\u611f\u77e5\u5019\u9009\u96c6+\u5ef6\u8fdf\u53cd\u8ddd\u79bb\u5e73\u65b9\u52bf\u80fd\u573a",
      "\u65b9\u5411\u8fde\u8d2f\u6027\u4f18\u5316+\u5c40\u90e8\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570+\u53cc\u66f2\u6b63\u5207\u975e\u7ebf\u6027\u8026\u5408+\u6307\u6570\u5e73\u6ed1\u65b9\u5411\u5411\u91cf+\u52a8\u6001\u5019\u9009\u96c6\u7f29\u51cf",
      "\u65b9\u5411\u8fde\u8d2f\u6027+\u5c40\u90e8\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570+\u53cd\u8ddd\u79bb\u52bf\u80fd\u573a+Sigmoid\u9636\u6bb5\u6df7\u5408+\u7a7a\u95f4\u81ea\u9002\u5e94\u5019\u9009\u96c6+\u53cc\u66f2\u6b63\u5207\u8026\u5408",
      "\u8d2a\u5fc3\u7b56\u7565+\u6700\u8fd1\u90bb+\u5269\u4f59\u8282\u70b9\u5206\u5e03",
      "\u4e09\u9636\u6bb5\u52a8\u6001\u5207\u6362+\u65b9\u5411\u8fde\u8d2f\u6027\u4f18\u5316+\u5c40\u90e8\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570+\u53cc\u66f2\u6b63\u5207\u8026\u5408+\u53cd\u8ddd\u79bb\u5e73\u65b9\u52bf\u80fd\u573a+\u6307\u6570\u5e73\u6ed1\u65b9\u5411\u8bb0\u5fc6+\u5bc6\u5ea6\u81ea\u9002\u5e94\u5019\u9009\u96c6",
      "\u65b9\u5411\u8fde\u8d2f\u6027+\u5c40\u90e8\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570+\u53cc\u66f2\u6b63\u5207\u8026\u5408+Sigmoid\u9636\u6bb5\u63a7\u5236+\u6307\u6570\u5e73\u6ed1\u65b9\u5411\u8bb0\u5fc6+\u504f\u5ea6\u611f\u77e5\u5019\u9009\u96c6+\u5ef6\u8fdf\u53cd\u8ddd\u79bb\u5e73\u65b9\u52bf\u80fd\u573a",
      "\u65b9\u5411\u8fde\u8d2f\u6027+\u5c40\u90e8\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570+\u53cc\u66f2\u6b63\u5207\u8026\u5408+\u71b5\u9a71\u52a8\u4e09\u6a21\u6001\u5207\u6362+\u6ed1\u52a8\u7a97\u53e3\u65b9\u5411\u5e73\u6ed1+\u6e10\u8fdb\u5f0f\u5019\u9009\u96c6\u7f29\u51cf+\u5ef6\u8fdf\u52bf\u80fd\u573a\u6fc0\u6d3b+\u53cd\u8ddd\u79bb\u5e73\u65b9\u52bf\u80fd\u573a"
    ],
    "negative_features": [
      "\u5bc6\u5ea6\u805a\u7c7b\u5bfc\u5411+Delaunay\u62d3\u6251\u611f\u77e5+\u51f8\u5305\u9636\u6bb5\u5212\u5206+\u52a8\u6001\u68af\u5ea6\u6743\u91cd+\u4ea4\u53c9\u89c4\u907f",
      "\u9636\u6bb5\u81ea\u9002\u5e94+\u65b9\u5411\u8fde\u8d2f\u6027+\u8f7b\u91cf\u5316\u52bf\u80fd\u573a+\u5c40\u90e8\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570+\u52a8\u6001\u5019\u9009\u96c6\u7f29\u51cf+\u7ebf\u6027\u63d2\u503c\u8fc7\u6e21",
      "\u8d2a\u5fc3\u7b56\u7565+\u7a7a\u95f4\u4e2d\u5fc3\u5bfc\u5411+\u52a8\u6001\u6743\u91cd+\u95ed\u5408\u4f18\u5316",
      "\u71b5\u611f\u77e5\u4e09\u9636\u6bb5\u5207\u6362+KDTree\u7a7a\u95f4\u7d22\u5f15+\u65b9\u5411\u8fde\u8d2f\u6027\u4fee\u6b63+\u4e2d\u4f4d\u6570\u52bf\u80fd\u573a+\u5f39\u6027\u5019\u9009\u96c6+\u7ebf\u6027\u52a8\u6001\u52a0\u6743+Sigmoid\u5e73\u6ed1\u8fc7\u6e21",
      "Delaunay\u9aa8\u67b6\u4f18\u5148+\u66f2\u7387\u81ea\u9002\u5e94\u6b65\u957f+\u955c\u50cf\u5bf9\u79f0\u6291\u5236+MST/\u51f8\u5305\u52a8\u6001\u5207\u6362+\u51e0\u4f55\u7ed3\u6784\u611f\u77e5"
    ]
  }
}
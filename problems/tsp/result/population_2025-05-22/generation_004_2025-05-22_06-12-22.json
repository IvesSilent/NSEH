{
  "heuristics": [
    {
      "concept": "\u57fa\u4e8e\u65b9\u5411\u8fde\u8d2f\u6027\u4e0e\u52a8\u6001\u5bc6\u5ea6\u71b5\u7684\u8f7b\u91cf\u5316\u542f\u53d1\u5f0f\uff1a\u901a\u8fc7\u5c40\u90e8\u8fd1\u90bb\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570\u91cf\u5316\u7a7a\u95f4\u5206\u5e03\u590d\u6742\u5ea6\uff0c\u7ed3\u5408\u8def\u5f84\u5386\u53f2\u79fb\u52a8\u5411\u91cf\u7684\u6307\u6570\u5e73\u6ed1\u65b9\u5411\u5f15\u5bfc\u641c\u7d22\uff1b\u91c7\u7528\u53cc\u66f2\u6b63\u5207\u51fd\u6570\u975e\u7ebf\u6027\u8026\u5408\u5c40\u90e8\u8ddd\u79bb\u3001\u65b9\u5411\u4e00\u81f4\u6027\u548c\u5bc6\u5ea6\u71b5\uff0c\u5b9e\u73b0\u81ea\u9002\u5e94\u7684\u63a2\u7d22-\u6536\u655b\u5e73\u8861\uff0c\u5728\u4fdd\u8bc1\u8f7b\u91cf\u8ba1\u7b97\u7684\u540c\u65f6\u63d0\u5347\u8def\u5f84\u6d41\u7545\u6027",
      "feature": "\u65b9\u5411\u8fde\u8d2f\u6027\u4f18\u5316+\u5c40\u90e8\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570+\u53cc\u66f2\u6b63\u5207\u975e\u7ebf\u6027\u8026\u5408+\u6307\u6570\u5e73\u6ed1\u65b9\u5411\u5411\u91cf+\u52a8\u6001\u5019\u9009\u96c6\u7f29\u51cf",
      "algorithm": "import numpy as np  \n\ndef select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):  \n    if len(unvisited_nodes) == 0:  \n        return destination_node  \n\n    # \u8ba1\u7b97\u5c40\u90e8\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570\uff08\u6807\u51c6\u5dee/\u5747\u503c\uff09  \n    local_dists = distance_matrix[current_node][unvisited_nodes]  \n    mean_dist = np.mean(local_dists)  \n    cv_density = np.std(local_dists) / (mean_dist + 1e-8)  \n\n    # \u65b9\u5411\u5411\u91cf\u6307\u6570\u5e73\u6ed1\uff08\u521d\u59cb\u5316\u4e3a\u5f53\u524d\u8282\u70b9\u5230\u672a\u8bbf\u95ee\u8282\u70b9\u5e73\u5747\u65b9\u5411\uff09  \n    dir_vectors = distance_matrix[unvisited_nodes] - distance_matrix[current_node]  \n    avg_direction = np.mean(dir_vectors, axis=0)  \n    avg_direction /= np.linalg.norm(avg_direction) + 1e-8  \n\n    # \u52a8\u6001\u5019\u9009\u96c6\uff08Top 20%\u6700\u8fd1\u90bb\uff09  \n    k = max(1, int(len(unvisited_nodes) * 0.2))  \n    candidate_indices = np.argpartition(local_dists, k)[:k]  \n\n    min_score = np.inf  \n    next_node = unvisited_nodes[0]  \n\n    for idx in candidate_indices:  \n        node = unvisited_nodes[idx]  \n        node_dir = distance_matrix[node] - distance_matrix[current_node]  \n        dir_sim = np.dot(avg_direction, node_dir) / (np.linalg.norm(node_dir) + 1e-8)  \n\n        # \u975e\u7ebf\u6027\u8bc4\u5206\uff1a\u8ddd\u79bb \u00d7 tanh(1 + \u65b9\u5411\u4fee\u6b63) \u00d7 (1 - \u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570)  \n        score = local_dists[idx] * np.tanh(1.5 + dir_sim) * (1.1 - cv_density)  \n\n        if score < min_score:  \n            min_score = score  \n            next_node = node  \n\n    return next_node",
      "objective": 1.4878632684536828
    },
    {
      "concept": "\u65b9\u5411\u52bf\u80fd\u6df7\u5408\u573a+\u52a8\u6001\u9636\u6bb5\u5207\u6362+\u53cc\u5bc6\u5ea6\u8c03\u63a7\uff1a\u878d\u5408\u65b9\u5411\u8fde\u8d2f\u6027\u4e0e\u52bf\u80fd\u573a\u7406\u8bba\uff0c\u901a\u8fc7\u8def\u5f84\u6784\u5efa\u8fdb\u5ea6\u52a8\u6001\u8c03\u6574\u7b56\u7565\u6743\u91cd\uff0c\u7ed3\u5408\u5c40\u90e8\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570\u548c\u5168\u5c40\u5206\u5e03\u5bc6\u5ea6\u5b9e\u73b0\u81ea\u9002\u5e94\u8bc4\u5206\u3002\u65b9\u5411\u4fee\u6b63\u52bf\u80fd\u8ba1\u7b97\u589e\u5f3a\u8def\u5f84\u6d41\u7545\u6027\uff0c\u9636\u6bb5\u611f\u77e5\u673a\u5236\u5e73\u8861\u63a2\u7d22\u4e0e\u6536\u655b\uff0c\u53cc\u5bc6\u5ea6\u8c03\u63a7\u4f18\u5316\u7a00\u758f/\u5bc6\u96c6\u533a\u57df\u7684\u641c\u7d22\u503e\u5411\u3002",
      "feature": "\u65b9\u5411\u4fee\u6b63\u52bf\u80fd\u573a+\u52a8\u6001\u9636\u6bb5\u5207\u6362+\u53cc\u5bc6\u5ea6\u8c03\u63a7+\u6307\u6570\u5e73\u6ed1\u65b9\u5411\u5411\u91cf+\u53cd\u8ddd\u79bb\u5e73\u65b9\u548c+\u975e\u7ebf\u6027\u8026\u5408",
      "algorithm": "import numpy as np  \n\ndef select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):  \n    if len(unvisited_nodes) == 0:  \n        return destination_node  \n\n    # \u9636\u6bb5\u5212\u5206\u7cfb\u6570\uff08\u5df2\u8bbf\u95ee\u6bd4\u4f8b\uff09  \n    progress = 1 - len(unvisited_nodes) / (distance_matrix.shape[0] - 1)  \n\n    # \u65b9\u5411\u5411\u91cf\u6307\u6570\u5e73\u6ed1  \n    dir_vectors = distance_matrix[unvisited_nodes] - distance_matrix[current_node]  \n    avg_direction = np.mean(dir_vectors, axis=0)  \n    avg_direction /= np.linalg.norm(avg_direction) + 1e-8  \n\n    # \u53cc\u5bc6\u5ea6\u8ba1\u7b97  \n    local_dists = distance_matrix[current_node][unvisited_nodes]  \n    cv_density = np.std(local_dists) / (np.mean(local_dists) + 1e-8)  # \u5c40\u90e8\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570  \n    global_density = 1 / (np.mean([np.min(distance_matrix[u][unvisited_nodes[unvisited_nodes != u]]) for u in unvisited_nodes]) + 1e-8)  # \u5168\u5c40\u5bc6\u5ea6  \n\n    min_score = np.inf  \n    next_node = unvisited_nodes[0]  \n\n    for node in unvisited_nodes:  \n        local_dist = distance_matrix[current_node][node]  \n        node_dir = distance_matrix[node] - distance_matrix[current_node]  \n        dir_sim = np.dot(avg_direction, node_dir) / (np.linalg.norm(node_dir) + 1e-8)  \n\n        # \u65b9\u5411\u4fee\u6b63\u52bf\u80fd  \n        potential = np.sum((1 + dir_sim) / (distance_matrix[node][unvisited_nodes]**2 + 1e-8))  \n\n        # \u52a8\u6001\u9636\u6bb5\u6743\u91cd  \n        phase_weight = 0.5 * (1 + np.tanh(10 * (progress - 0.5)))  # 0\u21921\u6e10\u53d8  \n\n        # \u53cc\u5bc6\u5ea6\u8c03\u63a7\u7cfb\u6570  \n        density_coef = np.tanh(cv_density * global_density)  \n\n        # \u975e\u7ebf\u6027\u8bc4\u5206  \n        score = local_dist * (potential ** (phase_weight * density_coef)) * (1.2 - dir_sim * (1 - phase_weight))  \n\n        if score < min_score:  \n            min_score = score  \n            next_node = node  \n\n    return next_node",
      "objective": 1.5131031172460812
    },
    {
      "concept": "\u8be5\u542f\u53d1\u5f0f\u7b97\u6cd5\u57fa\u4e8e\u8d2a\u5fc3\u7b56\u7565\uff0c\u5728\u5f53\u524d\u8282\u70b9\u7684\u672a\u8bbf\u95ee\u90bb\u5c45\u4e2d\u9009\u62e9\u8ddd\u79bb\u6700\u77ed\u7684\u8282\u70b9\u4f5c\u4e3a\u4e0b\u4e00\u4e2a\u8bbf\u95ee\u8282\u70b9\uff0c\u540c\u65f6\u8003\u8651\u5269\u4f59\u672a\u8bbf\u95ee\u8282\u70b9\u7684\u5206\u5e03\uff0c\u4ee5\u907f\u514d\u8fc7\u65e9\u9677\u5165\u5c40\u90e8\u6700\u4f18\u3002",
      "feature": "\u8d2a\u5fc3\u7b56\u7565+\u6700\u8fd1\u90bb+\u5269\u4f59\u8282\u70b9\u5206\u5e03",
      "algorithm": "import numpy as np\n\ndef select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if len(unvisited_nodes) == 0:\n        return destination_node\n    min_distance = np.inf\n    next_node = unvisited_nodes[0]\n    for node in unvisited_nodes:\n        current_distance = distance_matrix[current_node][node]\n        if current_distance < min_distance:\n            min_distance = current_distance\n            next_node = node\n    return next_node",
      "objective": 1.645516479081369
    },
    {
      "concept": "\u8be5\u542f\u53d1\u5f0f\u57fa\u4e8e\u62d3\u6251\u52bf\u80fd\u573a\u7406\u8bba\uff0c\u5c06\u672a\u8bbf\u95ee\u8282\u70b9\u89c6\u4e3a\u52bf\u80fd\u6e90\u70b9\uff0c\u5019\u9009\u8282\u70b9\u7684\u9009\u62e9\u9700\u540c\u65f6\u6700\u5c0f\u5316\u5c40\u90e8\u79fb\u52a8\u8ddd\u79bb\u548c\u5168\u5c40\u52bf\u80fd\u6d88\u8017\u3002\u901a\u8fc7\u8ba1\u7b97\u5019\u9009\u8282\u70b9\u5230\u5176\u4ed6\u672a\u8bbf\u95ee\u8282\u70b9\u7684\u53cd\u8ddd\u79bb\u5e73\u65b9\u548c\u4f5c\u4e3a\u52bf\u80fd\u6307\u6807\uff0c\u5e76\u4e0e\u5c40\u90e8\u8ddd\u79bb\u5f62\u6210\u4e58\u79ef\u8bc4\u5206\uff0c\u5b9e\u73b0\u975e\u7ebf\u6027\u8026\u5408\u4f18\u5316\u3002\u7cfb\u7edf\u6839\u636e\u672a\u8bbf\u95ee\u8282\u70b9\u7684\u7a7a\u95f4\u5206\u5e03\u5bc6\u5ea6\u81ea\u52a8\u8c03\u8282\u641c\u7d22\u503e\u5411\uff0c\u5728\u5bc6\u96c6\u533a\u57df\u4fa7\u91cd\u5c40\u90e8\u8ddd\u79bb\uff0c\u5728\u7a00\u758f\u533a\u57df\u5f3a\u5316\u52bf\u80fd\u5e73\u8861\u3002",
      "feature": "\u62d3\u6251\u52bf\u80fd\u573a+\u53cd\u8ddd\u79bb\u5e73\u65b9\u548c+\u975e\u7ebf\u6027\u4e58\u79ef\u8bc4\u5206+\u5bc6\u5ea6\u81ea\u9002\u5e94",
      "algorithm": "import numpy as np  \n\ndef select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):  \n    if len(unvisited_nodes) == 0:  \n        return destination_node  \n\n    # \u8ba1\u7b97\u672a\u8bbf\u95ee\u8282\u70b9\u5206\u5e03\u5bc6\u5ea6\uff08\u5e73\u5747\u6700\u8fd1\u90bb\u8ddd\u79bb\u7684\u5012\u6570\uff09  \n    nn_distances = [np.min([distance_matrix[u][v] for v in unvisited_nodes if v != u]) for u in unvisited_nodes]  \n    density_factor = 1 / (np.mean(nn_distances) + 1e-8)  \n\n    min_score = np.inf  \n    next_node = unvisited_nodes[0]  \n\n    for node in unvisited_nodes:  \n        local_dist = distance_matrix[current_node][node]  \n        # \u8ba1\u7b97\u5019\u9009\u8282\u70b9\u5230\u5176\u4ed6\u672a\u8bbf\u95ee\u8282\u70b9\u7684\u52bf\u80fd\uff08\u53cd\u8ddd\u79bb\u5e73\u65b9\u548c\uff09  \n        potential = np.sum(1 / (distance_matrix[node][unvisited_nodes]**2 + 1e-8))  \n        # \u52a8\u6001\u975e\u7ebf\u6027\u8bc4\u5206\uff1a\u5c40\u90e8\u8ddd\u79bb\u00d7\u52bf\u80fd^\u81ea\u9002\u5e94\u7cfb\u6570  \n        score = local_dist * (potential ** (1 - 0.5 * np.tanh(density_factor)))  \n\n        if score < min_score:  \n            min_score = score  \n            next_node = node  \n\n    return next_node",
      "objective": 1.645516479081369
    },
    {
      "concept": "\u8be5\u542f\u53d1\u5f0f\u57fa\u4e8e\u8def\u5f84\u71b5\u589e\u539f\u7406\uff0c\u5c06\u5019\u9009\u8282\u70b9\u9009\u62e9\u5efa\u6a21\u4e3a\u7cfb\u7edf\u4fe1\u606f\u71b5\u7684\u8c03\u63a7\u8fc7\u7a0b\u3002\u65e9\u671f\u9636\u6bb5\u4f18\u5148\u9009\u62e9\u80fd\u6700\u5927\u5316\u589e\u52a0\u8def\u5f84\u62d3\u6251\u590d\u6742\u6027\u7684\u8282\u70b9\uff08\u5982\u9ad8\u8fde\u63a5\u5ea6\u67a2\u7ebd\uff09\uff0c\u901a\u8fc7\u8ba1\u7b97\u5019\u9009\u8282\u70b9\u4e0e\u5f53\u524d\u8def\u5f84\u7684\u6700\u77ed\u8def\u5f84\u91cd\u53e0\u5ea6\u91cf\u5316\u71b5\u589e\u6f5c\u529b\uff1b\u540e\u671f\u9636\u6bb5\u5219\u6700\u5c0f\u5316\u71b5\u589e\u4ee5\u6536\u655b\u5230\u5c40\u90e8\u4f18\u5316\u3002\u52a8\u6001\u5207\u6362\u9608\u503c\u7531\u5269\u4f59\u8282\u70b9\u7684\u9999\u519c\u71b5\u81ea\u9002\u5e94\u51b3\u5b9a\uff0c\u5b9e\u73b0\u4ece\u5168\u5c40\u63a2\u7d22\u5230\u5c40\u90e8\u4f18\u5316\u7684\u5e73\u6ed1\u8fc7\u6e21\u3002",
      "feature": "\u8def\u5f84\u71b5\u589e\u539f\u7406+\u6700\u77ed\u8def\u5f84\u91cd\u53e0\u5ea6+\u9999\u519c\u71b5\u9608\u503c+\u81ea\u9002\u5e94\u9636\u6bb5\u5207\u6362+\u62d3\u6251\u590d\u6742\u6027\u8c03\u63a7",
      "algorithm": "import numpy as np\nfrom scipy.stats import entropy\n\ndef select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if len(unvisited_nodes) == 0:\n        return destination_node\n    \n    # \u8ba1\u7b97\u5269\u4f59\u8282\u70b9\u5206\u5e03\u71b5\n    coord_std = np.std(unvisited_nodes)\n    entropy_threshold = 0.5 * np.log1p(coord_std) if coord_std > 0 else 0\n    \n    min_score = np.inf\n    next_node = unvisited_nodes[0]\n    \n    for node in unvisited_nodes:\n        # \u5c40\u90e8\u8ddd\u79bb\u5206\u91cf\n        local_dist = distance_matrix[current_node][node]\n        \n        # \u71b5\u589e\u6f5c\u529b\u8ba1\u7b97\uff08\u4e0e\u5f53\u524d\u8282\u70b9\u7684\u6700\u77ed\u8def\u5f84\u91cd\u53e0\u8282\u70b9\u6bd4\u4f8b\uff09\n        sp_overlap = len(set(np.where(distance_matrix[current_node] + distance_matrix[node] == \n                                     distance_matrix[current_node][node])[0]) & set(unvisited_nodes))\n        entropy_gain = sp_overlap / len(unvisited_nodes)\n        \n        # \u52a8\u6001\u8bc4\u5206\uff1a\u9ad8\u71b5\u9636\u6bb5(entropy_threshold>0)\u6700\u5927\u5316\u71b5\u589e\uff0c\u4f4e\u71b5\u9636\u6bb5\u6700\u5c0f\u5316\u8ddd\u79bb\n        score = local_dist / (entropy_gain + 1e-8) if entropy_threshold > 0 else local_dist\n        \n        if score < min_score:\n            min_score = score\n            next_node = node\n            \n    return next_node",
      "objective": 1.645516479081369
    },
    {
      "concept": "\u5206\u5c42\u52a8\u6001\u8d2a\u5fc3\u7b56\u7565\uff1a\u7ed3\u5408\u5c40\u90e8\u6700\u8fd1\u90bb\u641c\u7d22\u4e0e\u5168\u5c40\u65b9\u5411\u5f15\u5bfc\uff0c\u6839\u636e\u672a\u8bbf\u95ee\u8282\u70b9\u7684\u7a7a\u95f4\u5206\u5e03\u5bc6\u5ea6\u52a8\u6001\u8c03\u6574\u51b3\u7b56\u6743\u91cd\u3002\u8fd1\u5c42\u8282\u70b9\u91c7\u7528\u8d2a\u5fc3\u9009\u62e9\uff0c\u8fdc\u5c42\u8282\u70b9\u671d\u5411\u5269\u4f59\u8282\u70b9\u8d28\u5fc3\u65b9\u5411\u4f18\u5316\uff0c\u901a\u8fc7\u8f7b\u91cf\u7ea7\u7a7a\u95f4\u79bb\u6563\u5ea6\u8ba1\u7b97\u5b9e\u73b0\u81ea\u9002\u5e94\u5206\u5c42\u9608\u503c\u63a7\u5236\u3002",
      "feature": "\u5206\u5c42\u8d2a\u5fc3+\u65b9\u5411\u5f15\u5bfc+\u5bc6\u5ea6\u81ea\u9002\u5e94+\u8f7b\u91cf\u52bf\u80fd",
      "algorithm": "import numpy as np  \n\ndef select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):  \n    if len(unvisited_nodes) == 0:  \n        return destination_node  \n\n    # \u8ba1\u7b97\u5269\u4f59\u8282\u70b9\u8d28\u5fc3\u65b9\u5411  \n    centroid = np.mean([distance_matrix[current_node][u] for u in unvisited_nodes])  \n    # \u8ba1\u7b97\u7a7a\u95f4\u79bb\u6563\u5ea6\uff08\u5e73\u5747\u8ddd\u79bb\u6807\u51c6\u5dee\uff09  \n    std_dist = np.std([distance_matrix[current_node][u] for u in unvisited_nodes])  \n    # \u52a8\u6001\u5206\u5c42\u9608\u503c\uff1a\u79bb\u6563\u5ea6\u8d8a\u5927\u9608\u503c\u8d8a\u9ad8  \n    threshold = np.median([distance_matrix[current_node][u] for u in unvisited_nodes]) * (1 + np.tanh(std_dist))  \n\n    min_score = np.inf  \n    next_node = unvisited_nodes[0]  \n\n    for node in unvisited_nodes:  \n        dist = distance_matrix[current_node][node]  \n        # \u8fd1\u5c42\u8282\u70b9\u7eaf\u8d2a\u5fc3\uff0c\u8fdc\u5c42\u8282\u70b9\u52a0\u5165\u65b9\u5411\u4fee\u6b63  \n        if dist <= threshold:  \n            score = dist  \n        else:  \n            direction_factor = abs(distance_matrix[node][unvisited_nodes].mean() - centroid)  \n            score = dist * (1 + direction_factor)  \n\n        if score < min_score:  \n            min_score = score  \n            next_node = node  \n\n    return next_node",
      "objective": 1.645516479081369
    },
    {
      "concept": "\u8be5\u542f\u53d1\u5f0f\u878d\u5408\u62d3\u6251\u52bf\u80fd\u573a\u4e0e\u8def\u5f84\u71b5\u589e\u539f\u7406\uff0c\u901a\u8fc7\u52a8\u6001\u8026\u5408\u5c40\u90e8\u8ddd\u79bb\u3001\u5168\u5c40\u52bf\u80fd\uff08\u53cd\u8ddd\u79bb\u5e73\u65b9\u548c\uff09\u548c\u8282\u70b9\u8fde\u63a5\u5ea6\u71b5\u6784\u5efa\u8bc4\u5206\u51fd\u6570\u3002\u5229\u7528\u5269\u4f59\u8282\u70b9\u7684\u7a7a\u95f4-\u62d3\u6251\u8054\u5408\u71b5\uff08\u7a7a\u95f4\u6807\u51c6\u5dee\u4e0e\u5ea6\u5206\u5e03\u71b5\u7684\u4e58\u79ef\uff09\u81ea\u9002\u5e94\u8c03\u8282\u63a2\u7d22\uff08\u71b5\u589e\u4e3b\u5bfc\uff09\u4e0e\u6536\u655b\uff08\u52bf\u80fd+\u8ddd\u79bb\u4e3b\u5bfc\uff09\u9636\u6bb5\uff0c\u91c7\u7528Sigmoid\u51fd\u6570\u5b9e\u73b0\u5e73\u6ed1\u8fc7\u6e21\uff0c\u5728\u4fdd\u8bc1\u8f7b\u91cf\u5316\u8ba1\u7b97\u7684\u540c\u65f6\u5e73\u8861\u7a7a\u95f4\u5bc6\u5ea6\u4e0e\u62d3\u6251\u590d\u6742\u6027\u3002",
      "feature": "\u52a8\u6001\u52bf\u80fd-\u71b5\u8026\u5408+\u53cd\u8ddd\u79bb\u5e73\u65b9\u52bf\u80fd+\u8282\u70b9\u8fde\u63a5\u5ea6\u71b5+Sigmoid\u9636\u6bb5\u8fc7\u6e21+\u7a7a\u95f4-\u62d3\u6251\u8054\u5408\u71b5",
      "algorithm": "import numpy as np\nfrom scipy.stats import entropy\n\ndef select_next_node(current_node, destination_node, unvisited_nodes, distance_matrix):\n    if len(unvisited_nodes) == 0:\n        return destination_node\n    \n    # \u8ba1\u7b97\u7a7a\u95f4-\u62d3\u6251\u8054\u5408\u71b5\uff08\u7a7a\u95f4\u6807\u51c6\u5dee\u00d7\u5ea6\u5206\u5e03\u71b5\uff09\n    coord_std = np.std([distance_matrix[current_node][u] for u in unvisited_nodes])\n    degrees = np.sum(distance_matrix[unvisited_nodes] < np.mean(distance_matrix), axis=1)\n    degree_entropy = entropy(degrees + 1e-8) if len(degrees) > 1 else 1\n    joint_entropy = coord_std * degree_entropy\n    \n    # Sigmoid\u52a8\u6001\u6743\u91cd\uff080=\u71b5\u589e\u4e3b\u5bfc\uff0c1=\u52bf\u80fd+\u8ddd\u79bb\u4e3b\u5bfc\uff09\n    alpha = 1 / (1 + np.exp(-joint_entropy + np.median(distance_matrix)))\n    \n    min_score = np.inf\n    next_node = unvisited_nodes[0]\n    \n    for node in unvisited_nodes:\n        local_dist = distance_matrix[current_node][node]\n        potential = np.sum(1 / (distance_matrix[node][unvisited_nodes]**2 + 1e-8))\n        degree_weight = degrees[np.where(unvisited_nodes == node)[0][0]] / (np.max(degrees) + 1e-8)\n        \n        # \u52a8\u6001\u8bc4\u5206\uff1aalpha=1\u65f6\u52bf\u80fd+\u8ddd\u79bb\u4e3b\u5bfc\uff0calpha=0\u65f6\u8fde\u63a5\u5ea6\u71b5\u4e3b\u5bfc\n        score = alpha * (local_dist * potential) + (1 - alpha) * (local_dist / (degree_weight + 1e-8))\n        \n        if score < min_score:\n            min_score = score\n            next_node = node\n            \n    return next_node",
      "objective": 1.645516479081369
    }
  ],
  "memory": {
    "positive_features": [
      "\u8def\u5f84\u71b5\u589e\u539f\u7406+\u6700\u77ed\u8def\u5f84\u91cd\u53e0\u5ea6+\u9999\u519c\u71b5\u9608\u503c+\u81ea\u9002\u5e94\u9636\u6bb5\u5207\u6362+\u62d3\u6251\u590d\u6742\u6027\u8c03\u63a7",
      "\u65b9\u5411\u4fee\u6b63\u52bf\u80fd\u573a+\u52a8\u6001\u9636\u6bb5\u5207\u6362+\u53cc\u5bc6\u5ea6\u8c03\u63a7+\u6307\u6570\u5e73\u6ed1\u65b9\u5411\u5411\u91cf+\u53cd\u8ddd\u79bb\u5e73\u65b9\u548c+\u975e\u7ebf\u6027\u8026\u5408",
      "\u62d3\u6251\u52bf\u80fd\u573a+\u53cd\u8ddd\u79bb\u5e73\u65b9\u548c+\u975e\u7ebf\u6027\u4e58\u79ef\u8bc4\u5206+\u5bc6\u5ea6\u81ea\u9002\u5e94",
      "\u65b9\u5411\u8fde\u8d2f\u6027\u4f18\u5316+\u5c40\u90e8\u5bc6\u5ea6\u53d8\u5f02\u7cfb\u6570+\u53cc\u66f2\u6b63\u5207\u975e\u7ebf\u6027\u8026\u5408+\u6307\u6570\u5e73\u6ed1\u65b9\u5411\u5411\u91cf+\u52a8\u6001\u5019\u9009\u96c6\u7f29\u51cf",
      "\u8d2a\u5fc3\u7b56\u7565+\u6700\u8fd1\u90bb+\u5269\u4f59\u8282\u70b9\u5206\u5e03"
    ],
    "negative_features": [
      "\u8def\u5f84\u5f62\u6001\u611f\u77e5+\u51f8\u5305\u4f18\u5316+\u53cc\u9636\u6bb5\u8bc4\u4f30+\u56de\u65cb\u6307\u6570\u53cd\u9988+\u62d3\u6251\u7d27\u51d1\u6027",
      "\u62d3\u6251\u9aa8\u67b6\u4f18\u5148+\u4ecb\u6570\u4e2d\u5fc3\u6027\u8fd1\u4f3c+\u65b9\u5411\u4e00\u81f4\u6027\u7ea6\u675f+\u5ea6\u6570\u65b9\u5dee\u9636\u6bb5\u5207\u6362+\u5c40\u90e8\u8d2a\u5fc3\u586b\u5145",
      "\u5bc6\u5ea6\u805a\u7c7b\u5bfc\u5411+Delaunay\u62d3\u6251\u611f\u77e5+\u51f8\u5305\u9636\u6bb5\u5212\u5206+\u52a8\u6001\u68af\u5ea6\u6743\u91cd+\u4ea4\u53c9\u89c4\u907f",
      "\u8d2a\u5fc3\u7b56\u7565+\u7a7a\u95f4\u4e2d\u5fc3\u5bfc\u5411+\u52a8\u6001\u6743\u91cd+\u95ed\u5408\u4f18\u5316",
      "Delaunay\u9aa8\u67b6\u4f18\u5148+\u66f2\u7387\u81ea\u9002\u5e94\u6b65\u957f+\u955c\u50cf\u5bf9\u79f0\u6291\u5236+MST/\u51f8\u5305\u52a8\u6001\u5207\u6362+\u51e0\u4f55\u7ed3\u6784\u611f\u77e5"
    ]
  }
}